{"ast":null,"code":"import { REMOVE_TASK, TOGGLE_TASK, INITIAL_TASK } from \"../../actions/types\";\nconst initialStateUser = {\n  tasks: [{\n    id: 3,\n    id_todo: 4,\n    title: \"допилить фронт\",\n    is_completed: true\n  }, {\n    id: 32,\n    id_todo: 4,\n    title: \"написать брату\",\n    is_completed: false\n  }]\n};\nexport function task_reducer(state = initialStateUser, action) {\n  switch (action.type) {\n    case INITIAL_TASK:\n      let newElement;\n      const idAlreadyExists = state.tasks.filter(element => {\n        console.log(action.task.find(newElement => newElement.id !== element.id));\n      });\n      console.log(\"idAlreadyExists \", idAlreadyExists); // if(idAlreadyExists){\n      // .slice((task) => task.id === element.id)\n      //     newElement = [...state.tasks.concat(action.task)]\n      // }\n\n      console.log(action.task);\n      return { ...state\n        /*, tasks : [...state.tasks.concat(action.task)]*/\n\n      };\n\n    case TOGGLE_TASK:\n      return { ...state,\n        tasks: state.tasks.map(task => task.id === action.task.id ? { ...task,\n          is_completed: action.task.is_completed\n        } : task)\n      };\n\n    case REMOVE_TASK:\n      return Object.assign({}, state, {\n        tasks: state.tasks.filter(item => item.id !== action.task.id)\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/julia/ToDoList/my-app/src/store/reducers/reducerTask/index.tsx"],"names":["REMOVE_TASK","TOGGLE_TASK","INITIAL_TASK","initialStateUser","tasks","id","id_todo","title","is_completed","task_reducer","state","action","type","newElement","idAlreadyExists","filter","element","console","log","task","find","map","Object","assign","item"],"mappings":"AAAA,SAAsBA,WAAtB,EAAmCC,WAAnC,EAAgDC,YAAhD,QAAoE,qBAApE;AAIA,MAAMC,gBAAgB,GAAG;AACrBC,EAAAA,KAAK,EAAI,CACL;AACIC,IAAAA,EAAE,EAAG,CADT;AAEIC,IAAAA,OAAO,EAAE,CAFb;AAGIC,IAAAA,KAAK,EAAE,gBAHX;AAIIC,IAAAA,YAAY,EAAG;AAJnB,GADK,EAOL;AACIH,IAAAA,EAAE,EAAE,EADR;AAEIC,IAAAA,OAAO,EAAE,CAFb;AAGIC,IAAAA,KAAK,EAAE,gBAHX;AAIIC,IAAAA,YAAY,EAAE;AAJlB,GAPK;AADY,CAAzB;AAiBA,OAAO,SAASC,YAAT,CAAwBC,KAAK,GAAGP,gBAAhC,EAAkDQ,MAAlD,EAA0D;AAC7D,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKV,YAAL;AACQ,UAAIW,UAAJ;AACA,YAAMC,eAAe,GAAGJ,KAAK,CAACN,KAAN,CAAYW,MAAZ,CAAoBC,OAAD,IAAa;AACpDC,QAAAA,OAAO,CAACC,GAAR,CAAaP,MAAM,CAACQ,IAAP,CAAYC,IAAZ,CAAkBP,UAAD,IAAgBA,UAAU,CAACR,EAAX,KAAkBW,OAAO,CAACX,EAA3D,CAAb;AACH,OAFuB,CAAxB;AAGAY,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCJ,eAAhC,EALR,CAOQ;AACI;AACJ;AACA;;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYP,MAAM,CAACQ,IAAnB;AACJ,aAAO,EAAC,GAAGT;AAAM;;AAAV,OAAP;;AACJ,SAAKT,WAAL;AACI,aAAO,EAAE,GAAGS,KAAL;AAAYN,QAAAA,KAAK,EAAEM,KAAK,CAACN,KAAN,CAAYiB,GAAZ,CAAiBF,IAAD,IACtCA,IAAI,CAACd,EAAL,KAAYM,MAAM,CAACQ,IAAP,CAAYd,EAAxB,GAA6B,EAAC,GAAGc,IAAJ;AAAUX,UAAAA,YAAY,EAAGG,MAAM,CAACQ,IAAP,CAAYX;AAArC,SAA7B,GAAkFW,IAD5D;AAAnB,OAAP;;AAEJ,SAAKnB,WAAL;AACI,aAAOsB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBb,KAAlB,EAAyB;AAC5BN,QAAAA,KAAK,EAAEM,KAAK,CAACN,KAAN,CAAYW,MAAZ,CAAoBS,IAAD,IAAiBA,IAAI,CAACnB,EAAL,KAAYM,MAAM,CAACQ,IAAP,CAAYd,EAA5D;AADqB,OAAzB,CAAP;;AAGJ;AAAU,aAAOK,KAAP;AArBd;AAuBH","sourcesContent":["import { CREATE_TASK, REMOVE_TASK, TOGGLE_TASK, INITIAL_TASK } from \"../../actions/types\";\nimport  { ITask }  from \"../../../interfaces/ITask\";\n\n\nconst initialStateUser = {\n    tasks :  [\n        {\n            id : 3,\n            id_todo: 4,\n            title: \"допилить фронт\",\n            is_completed : true\n        },\n        {\n            id: 32, \n            id_todo: 4, \n            title: \"написать брату\", \n            is_completed: false\n        }\n    ]\n};\n\nexport function task_reducer ( state = initialStateUser, action) {\n    switch(action.type){\n        case INITIAL_TASK:\n                let newElement\n                const idAlreadyExists = state.tasks.filter((element) => {\n                    console.log( action.task.find((newElement) => newElement.id !== element.id))\n                })\n                console.log(\"idAlreadyExists \", idAlreadyExists)\n                \n                // if(idAlreadyExists){\n                    // .slice((task) => task.id === element.id)\n                //     newElement = [...state.tasks.concat(action.task)]\n                // }\n                console.log(action.task)\n            return {...state /*, tasks : [...state.tasks.concat(action.task)]*/} \n        case TOGGLE_TASK:\n            return { ...state, tasks: state.tasks.map((task : ITask)=>\n                task.id === action.task.id ? {...task, is_completed : action.task.is_completed} : task )};\n        case REMOVE_TASK:\n            return Object.assign({}, state, {\n                tasks: state.tasks.filter((item : ITask)=> item.id !== action.task.id)\n            });\n        default : return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}