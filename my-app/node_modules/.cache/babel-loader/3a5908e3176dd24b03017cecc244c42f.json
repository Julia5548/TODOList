{"ast":null,"code":"import { baseUrl } from \"./baseUrlRequest\";\n\nconst prepareBodyRequest = payload => {\n  return JSON.stringify(payload);\n};\n\nconst prepareHeadersRequest = token => {\n  let headers;\n  headers = {\n    'Content-type': 'application/json'\n  };\n\n  if (token) {\n    headers = { ...headers,\n      Authorization: `JWT ${token}`\n    };\n  }\n\n  return headers;\n};\n\nconst getResponseBody = async response => {\n  let data;\n  console.log(rea);\n\n  if (response.status !== 204 && response.status < 300) {\n    data = await response.json();\n  }\n\n  return {\n    data,\n    status: response.status,\n    statusText: response.statusText\n  };\n};\n\nconst request = async (url, data, token) => {\n  if (data.payload) {\n    data.body = prepareBodyRequest(data.payload);\n  }\n\n  data.mode = 'cors';\n  data.headers = prepareHeadersRequest(token);\n  const requestUrl = baseUrl + url;\n  let response;\n\n  try {\n    response = await fetch(requestUrl, data);\n  } catch (error) {\n    console.log(\"Что-то не так с сетью\");\n  }\n\n  const responseBody = await getResponseBody(response);\n\n  if (responseBody.status < 200 || responseBody.status >= 300) {\n    console.log(responseBody);\n    return {\n      error: responseBody.status\n    };\n  }\n\n  return response.ok ? {\n    response: responseBody\n  } : {\n    error: responseBody.status\n  };\n};\n\nexport const signIn = payload => request('token/auth/', {\n  method: 'POST',\n  payload\n});\nexport const signUp = payload => request('users/create/', {\n  method: 'POST',\n  payload\n});\nexport const currentUser = () => request('users/current/', {\n  method: 'GET'\n});\nexport const sendEmail = payload => request('password/reset/', {\n  method: 'POST',\n  payload\n});\nexport const resetPassword = payload => request('password/reset/confirm/', {\n  method: 'POST',\n  payload\n});\nexport const getTodos = () => request('detail/todos/', {\n  method: 'GET'\n}, localStorage.getItem('token'));\nexport const createTodo = payload => request('detail/todos/', {\n  method: 'POST',\n  payload\n}, localStorage.getItem('token'));\nexport const removeTodo = (payload, pk) => request(`detail/todo/${pk}`, {\n  method: 'DELETE',\n  payload\n}, localStorage.getItem('token'));\nexport const getTasks = todo => request(`detail/todo/task/list/${todo}`, {\n  method: 'GET'\n}, localStorage.getItem('token'));\nexport const createTask = payload => request('detail/todo/task/create', {\n  method: 'POST',\n  payload\n}, localStorage.getItem('token'));\nexport const toggleTask = payload => request('detail/todo/task/', {\n  method: 'PUT',\n  payload\n}, localStorage.getItem('token'));\nexport const removeTask = payload => request('detail/todo/task/', {\n  method: 'DELETE',\n  payload\n}, localStorage.getItem('token'));","map":{"version":3,"sources":["/home/julia/ToDoList/my-app/src/services/index.tsx"],"names":["baseUrl","prepareBodyRequest","payload","JSON","stringify","prepareHeadersRequest","token","headers","Authorization","getResponseBody","response","data","console","log","rea","status","json","statusText","request","url","body","mode","requestUrl","fetch","error","responseBody","ok","signIn","method","signUp","currentUser","sendEmail","resetPassword","getTodos","localStorage","getItem","createTodo","removeTodo","pk","getTasks","todo","createTask","toggleTask","removeTask"],"mappings":"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","sourcesContent":["import { IUser } from \"../interfaces/IUser\";\nimport { baseUrl } from \"./baseUrlRequest\";\nimport { ITodoList } from \"../interfaces/ITodoList\";\nimport { ITask } from \"../interfaces/ITask\";\n\n\ntype Payload = Record<string, any>;\ntype Response = Record<string, any>;\n\ninterface RequestData<P extends Payload> extends RequestInit{\n    payload? : P;\n}\n\ninterface ResponseBody<R extends Response > {\n    data?: R;\n    status: number;\n    statusText: string;\n}\n  \ninterface ResponseData<R extends Response >{ \n    response?: ResponseBody<R>;\n    error?: any;\n}\n\n\nconst prepareBodyRequest = <T extends Payload>(payload: T) : string => {\n    return JSON.stringify(payload);\n}\n\nconst prepareHeadersRequest = (token?: string) : Record<string, string> => {\n\n    let headers : Record<string, string>;\n    headers = {\n        'Content-type' : 'application/json',\n    };\n\n    if(token) {\n        headers = {\n            ...headers,\n            Authorization : `JWT ${token}`\n        };\n    }\n    return headers;\n}\n\nconst getResponseBody = async <R extends Response>(response : Response) : Promise<ResponseBody<R>> => {\n    let data;\n    console.log(rea)\n    if(response.status !== 204 && response.status < 300 ){\n        data = await response.json();\n    }\n    return {\n        data, \n        status : response.status,\n        statusText : response.statusText,\n    };\n}\n\nconst request = async <P extends Payload, R extends Response>(\n    url : string,\n    data: RequestData<P>,\n    token? : string,\n) : Promise<ResponseData<R>> => {\n\n    if(data.payload){\n        data.body = prepareBodyRequest<Payload>(data.payload);\n    }\n    \n    data.mode = 'cors';\n    data.headers = prepareHeadersRequest(token);\n \n    const requestUrl = baseUrl + url;\n    let response;\n    \n    try{\n        response = await fetch(requestUrl, data);\n    }catch(error){\n        console.log(\"Что-то не так с сетью\");\n    }\n\n    const responseBody = await getResponseBody<R>(response);\n    \n    if(responseBody.status < 200 || responseBody.status >= 300 ){\n        console.log(responseBody)\n        return {error : responseBody.status};\n    }\n\n    return response.ok \n    ? { response : responseBody}\n    : { error : responseBody.status};\n}\n\ninterface TokenResponse{\n    token : string;\n}\n\nexport const signIn =(payload : IUser) => request<IUser, TokenResponse >(\n    'token/auth/', { method : 'POST',  payload },\n);\n\nexport const signUp =(payload : IUser) => request<IUser, TokenResponse >(\n    'users/create/', { method : 'POST',  payload },\n);\n\nexport const currentUser =() => request<IUser, TokenResponse >(\n    'users/current/', { method : 'GET' },\n);\n\nexport const sendEmail =(payload : IUser) => request<IUser, TokenResponse >(\n    'password/reset/', { method : 'POST',  payload},\n);\n\nexport const resetPassword =(payload) => request<IUser, TokenResponse >(\n    'password/reset/confirm/', { method : 'POST',  payload },\n);\n\nexport const getTodos = () => request<ITodoList, TokenResponse >(\n    'detail/todos/', { method : 'GET' }, localStorage.getItem('token')!,\n);\n\nexport const createTodo =(payload : ITodoList) => request<ITodoList, TokenResponse >(\n    'detail/todos/', { method : 'POST',  payload }, localStorage.getItem('token')!,\n);\n\nexport const removeTodo =(payload : ITodoList, pk:number) => request<ITodoList, TokenResponse >(\n    `detail/todo/${pk}`, { method : 'DELETE',  payload }, localStorage.getItem('token')!,\n);\n\nexport const getTasks =(todo:number) => request<ITask, TokenResponse >(\n    `detail/todo/task/list/${todo}`, { method : 'GET' }, localStorage.getItem('token')!,\n);\n\nexport const createTask =(payload : ITask) => request<ITask, TokenResponse >(\n    'detail/todo/task/create', { method : 'POST',  payload }, localStorage.getItem('token')!,\n);\n\nexport const toggleTask =(payload : ITask) => request<ITask, TokenResponse >(\n    'detail/todo/task/', { method : 'PUT',  payload }, localStorage.getItem('token')!,\n);\n\nexport const removeTask =(payload : ITask) => request<ITask, TokenResponse >(\n    'detail/todo/task/', {method : 'DELETE',  payload}, localStorage.getItem('token')!,\n);"]},"metadata":{},"sourceType":"module"}