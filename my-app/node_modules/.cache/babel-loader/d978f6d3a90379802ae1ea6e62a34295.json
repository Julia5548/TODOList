{"ast":null,"code":"var _jsxFileName = \"/home/julia/ToDoList/my-app/src/pages/todo-list/display-task/index.tsx\";\nimport React from 'react';\nimport { makeStyles, Typography, Button, AppBar, Toolbar, GridList, GridListTile, ListSubheader, GridListTileBar, IconButton } from '@material-ui/core';\nimport FormCreateTask from './components/formCreateTask';\nimport { connect } from 'react-redux';\nimport { addTaskAction } from '../../../store/actions';\nimport { reset } from 'redux-form';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  title: {\n    flexGrow: 1\n  },\n  submit: {\n    margin: theme.spacing(3.5, 0, 0, 2),\n    textAlign: 'center'\n  },\n  textField: {\n    textAlign: 'center',\n    marginLeft: theme.spacing(3),\n    color: theme.palette.text.secondary\n  },\n  rootList: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    overflow: 'hidden',\n    backgroundColor: theme.palette.background.paper\n  },\n  gridList: {\n    width: 500,\n    height: 450\n  },\n  icon: {\n    color: 'rgba(255, 255, 255, 0.54)'\n  }\n}));\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAddTask: newTask => {\n      dispatch(addTaskAction(newTask));\n      dispatch(reset('createTask'));\n    }\n  };\n};\n\nconst mapStateToProps = state => ({});\n\nexport const DisplayTodo = props => {\n  const classes = useStyles();\n  const todoList = [{\n    id: 0,\n    title: 'покормить кота',\n    isCompleted: false\n  }];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AppBar, {\n    position: \"static\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Toolbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    className: classes.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 21\n    }\n  }, \"username\"), /*#__PURE__*/React.createElement(Button, {\n    color: \"inherit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 21\n    }\n  }, \"\\u0412\\u044B\\u0445\\u043E\\u0434\"))), /*#__PURE__*/React.createElement(FormCreateTask, {\n    onAddTask: props.onAddTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.rootList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(GridList, {\n    cellHeight: 180,\n    className: classes.gridList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(GridListTile, {\n    key: \"Subheader\",\n    cols: 2,\n    style: {\n      height: 'auto'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(ListSubheader, {\n    component: \"div\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 25\n    }\n  }, \"December\")), tileData.map(tile => /*#__PURE__*/React.createElement(GridListTile, {\n    key: tile.img,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: tile.img,\n    alt: tile.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(GridListTileBar, {\n    title: tile.title,\n    subtitle: /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 47\n      }\n    }, \"by: \", tile.author),\n    actionIcon: /*#__PURE__*/React.createElement(IconButton, {\n      \"aria-label\": `info about ${tile.title}`,\n      className: classes.icon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(InfoIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 45\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 33\n    }\n  }))))));\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(DisplayTodo);","map":{"version":3,"sources":["/home/julia/ToDoList/my-app/src/pages/todo-list/display-task/index.tsx"],"names":["React","makeStyles","Typography","Button","AppBar","Toolbar","GridList","GridListTile","ListSubheader","GridListTileBar","IconButton","FormCreateTask","connect","addTaskAction","reset","useStyles","theme","root","flexGrow","title","submit","margin","spacing","textAlign","textField","marginLeft","color","palette","text","secondary","rootList","display","flexWrap","justifyContent","overflow","backgroundColor","background","paper","gridList","width","height","icon","mapDispatchToProps","dispatch","onAddTask","newTask","mapStateToProps","state","DisplayTodo","props","classes","todoList","id","isCompleted","tileData","map","tile","img","author"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { makeStyles, Typography, Button, AppBar, Toolbar, Grid, GridList, GridListTile, ListSubheader, GridListTileBar, IconButton} from '@material-ui/core';\nimport FormCreateTask from './components/formCreateTask';\nimport { connect } from 'react-redux';\nimport { addTaskAction } from '../../../store/actions';\nimport { reset } from 'redux-form';\nimport { ITask } from '../../../interfaces/ITask';\n\n\ninterface IProps{\n    onAddTask(newTask : ITask) : void;\n}\n\nconst useStyles = makeStyles((theme) => ({\n\n    root : {\n        flexGrow : 1,\n    },\n    title : {\n        flexGrow: 1,\n    },\n    submit : {\n        margin: theme.spacing(3.5, 0, 0, 2),\n        textAlign: 'center',\n    },\n    textField :{\n        textAlign: 'center',\n        marginLeft: theme.spacing(3),\n        color: theme.palette.text.secondary,\n    },\n    rootList: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'space-around',\n        overflow: 'hidden',\n        backgroundColor: theme.palette.background.paper,\n    },\n    gridList: {\n        width: 500,\n        height: 450,\n    },\n    icon: {\n        color: 'rgba(255, 255, 255, 0.54)',\n    },\n}))\n\nconst mapDispatchToProps = (dispatch) => {\n    return({\n        onAddTask : (newTask : ITask) => {\n            dispatch(addTaskAction(newTask))\n            dispatch(reset('createTask'))\n        }\n    })\n}\n\nconst mapStateToProps = (state) => ({})\n\nexport const DisplayTodo : React.FC<IProps> = (props : IProps) => {\n    const classes = useStyles();\n\n    const todoList = [\n        {\n            id: 0,\n            title : 'покормить кота',\n            isCompleted : false\n        }\n    ]\n    return(\n        <div className = {classes.root}>\n            <AppBar position = \"static\">\n                <Toolbar>\n                    <Typography variant=\"h6\" className = {classes.title}>\n                        username\n                    </Typography>\n                    <Button color=\"inherit\">\n                        Выход\n                    </Button>\n                </Toolbar>\n            </AppBar>\n            <FormCreateTask onAddTask = {props.onAddTask}/>\n            <div className={classes.rootList}>\n                <GridList cellHeight={180} className={classes.gridList}>\n                    <GridListTile key=\"Subheader\" cols={2} style={{ height: 'auto' }}>\n                        <ListSubheader component=\"div\">December</ListSubheader>\n                    </GridListTile>\n                        {tileData.map((tile) => (\n                            <GridListTile key={tile.img}>\n                                <img src={tile.img} alt={tile.title} />\n                                <GridListTileBar\n                                    title={tile.title}\n                                    subtitle={<span>by: {tile.author}</span>}\n                                    actionIcon={\n                                        <IconButton aria-label={`info about ${tile.title}`} className={classes.icon}>\n                                            <InfoIcon />\n                                        </IconButton>\n                                    }\n                                />\n                            </GridListTile>\n                        ))}\n                </GridList>\n            </div>\n           \n        </div>\n    )\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DisplayTodo)"]},"metadata":{},"sourceType":"module"}