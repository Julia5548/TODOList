{"ast":null,"code":"var _jsxFileName = \"/home/julia/ToDoList/my-app/src/pages/todo-list/display-todo/components/cardList.tsx\";\nimport React, { useCallback, useState } from 'react';\nimport { makeStyles, Grid } from '@material-ui/core';\nimport { createTaskAction } from '../../../../store/actions';\nimport { reset } from 'redux-form';\nimport { connect } from 'react-redux';\nconst useStyles = makeStyles(theme => ({\n  cardMedia: {\n    display: 'block'\n  },\n  cardGrid: {\n    marginLeft: theme.spacing(3),\n    width: '90%'\n  }\n}));\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAddTask: newTask => {\n      dispatch(createTaskAction(newTask));\n      dispatch(reset('create-task'));\n    }\n  };\n};\n\nconst CardTodo = ({\n  todoList,\n  onAddTask\n}) => {\n  const classes = useStyles();\n  const [idTodo, setId] = useState(0);\n  const [isCreateTask, setIsCreateTask] = useState(false);\n  const handleCreateTask = useCallback(event => {\n    setIsCreateTask(true);\n    setId(event.currentTarget.value);\n  }, [setIsCreateTask]);\n  const handleCLoseForm = useCallback(() => {\n    setIsCreateTask(false);\n  }, [setIsCreateTask]);\n  const handleCreate = useCallback(values => {\n    const newTask = {\n      id_todo: idTodo,\n      title: values.title,\n      is_completed: false\n    };\n    onAddTask(newTask);\n  }, [onAddTask, idTodo]);\n  console.log(idTodo, isCreateTask);\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"flex-start\",\n    alignItems: \"flex-start\",\n    spacing: 1,\n    className: classes.cardGrid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, \")\", todoList.map(todo => console.log(todo.id === idTodo) // <Grid key = {todo.id} item xs={6} md={3}>\n  //     <Card>\n  //         <CardHeader\n  //             action= {\n  //                 isCreateTask && (todo.id === idTodo) ?    \n  //                     <IconButton  aria-label=\"close\" color=\"primary\" onClick = {handleCLoseForm}>\n  //                         <Close/>\n  //                     </IconButton>\n  //                     :  \n  //                     <IconButton  aria-label=\"add\" color=\"primary\" onClick = {handleCreateTask} value = {todo.id!} >\n  //                         <Add/>\n  //                     </IconButton>\n  //             }\n  //             title = {todo.title}\n  //             subheader = \"Ваши задачи: \"\n  //         />\n  //         <CardActions className={classes.cardMedia}>\n  //             {isCreateTask && (todo.id===idTodo) ?\n  //                 <FormCreateTask onSubmit = {handleCreate} />\n  //                 : null\n  //             }\n  //             <ListTasks idTodo = {todo.id!}/>\n  //             <DeleteTodo todo = {todo}/>\n  //         </CardActions>\n  //     </Card>\n  // </Grid>\n  ));\n};\n\nexport default connect(null, mapDispatchToProps)(CardTodo);","map":{"version":3,"sources":["/home/julia/ToDoList/my-app/src/pages/todo-list/display-todo/components/cardList.tsx"],"names":["React","useCallback","useState","makeStyles","Grid","createTaskAction","reset","connect","useStyles","theme","cardMedia","display","cardGrid","marginLeft","spacing","width","mapDispatchToProps","dispatch","onAddTask","newTask","CardTodo","todoList","classes","idTodo","setId","isCreateTask","setIsCreateTask","handleCreateTask","event","currentTarget","value","handleCLoseForm","handleCreate","values","id_todo","title","is_completed","console","log","map","todo","id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,QAA7B,QAA6C,OAA7C;AAEA,SAASC,UAAT,EAAqBC,IAArB,QAA4E,mBAA5E;AAMA,SAASC,gBAAT,QAAiC,2BAAjC;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAQA,MAAMC,SAAS,GAAGL,UAAU,CAAEM,KAAD,KAAY;AACrCC,EAAAA,SAAS,EAAE;AACPC,IAAAA,OAAO,EAAE;AADF,GAD0B;AAIrCC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,UAAU,EAAGJ,KAAK,CAACK,OAAN,CAAc,CAAd,CADP;AAENC,IAAAA,KAAK,EAAG;AAFF;AAJ2B,CAAZ,CAAD,CAA5B;;AAUA,MAAMC,kBAAkB,GAAIC,QAAD,IAAc;AACrC,SAAO;AACHC,IAAAA,SAAS,EAAIC,OAAD,IAAqB;AAC7BF,MAAAA,QAAQ,CAACZ,gBAAgB,CAACc,OAAD,CAAjB,CAAR;AACAF,MAAAA,QAAQ,CAACX,KAAK,CAAC,aAAD,CAAN,CAAR;AACH;AAJE,GAAP;AAOH,CARD;;AAUA,MAAMc,QAA2B,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAWH,EAAAA;AAAX,CAAD,KAAmC;AACnE,QAAMI,OAAO,GAAGd,SAAS,EAAzB;AACA,QAAM,CAACe,MAAD,EAASC,KAAT,IAAkBtB,QAAQ,CAAS,CAAT,CAAhC;AAEA,QAAK,CAACuB,YAAD,EAAeC,eAAf,IAAkCxB,QAAQ,CAAC,KAAD,CAA/C;AAEA,QAAMyB,gBAAgB,GAAG1B,WAAW,CAAG2B,KAAD,IAAU;AAC5CF,IAAAA,eAAe,CAAC,IAAD,CAAf;AACAF,IAAAA,KAAK,CAACI,KAAK,CAACC,aAAN,CAAoBC,KAArB,CAAL;AACH,GAHmC,EAGjC,CAACJ,eAAD,CAHiC,CAApC;AAKA,QAAMK,eAAe,GAAG9B,WAAW,CAAC,MAAM;AACtCyB,IAAAA,eAAe,CAAC,KAAD,CAAf;AACH,GAFkC,EAEhC,CAACA,eAAD,CAFgC,CAAnC;AAIA,QAAMM,YAAY,GAAG/B,WAAW,CAACgC,MAAM,IAAI;AACvC,UAAMd,OAAe,GAAG;AACpBe,MAAAA,OAAO,EAAGX,MADU;AAEpBY,MAAAA,KAAK,EAAEF,MAAM,CAACE,KAFM;AAGpBC,MAAAA,YAAY,EAAG;AAHK,KAAxB;AAMAlB,IAAAA,SAAS,CAACC,OAAD,CAAT;AACH,GAR+B,EAQ7B,CAACD,SAAD,EAAYK,MAAZ,CAR6B,CAAhC;AAUAc,EAAAA,OAAO,CAACC,GAAR,CAAYf,MAAZ,EAAoBE,YAApB;AACA,sBACI,oBAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AACI,IAAA,SAAS,EAAG,KADhB;AAEI,IAAA,OAAO,EAAG,YAFd;AAGI,IAAA,UAAU,EAAG,YAHjB;AAII,IAAA,OAAO,EAAI,CAJf;AAKI,IAAA,SAAS,EAAIH,OAAO,CAACV,QALzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAQKS,QAAQ,CAACkB,GAAT,CAAcC,IAAD,IACVH,OAAO,CAACC,GAAR,CAAYE,IAAI,CAACC,EAAL,KAAYlB,MAAxB,CADU,CAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5BH,GARL,CADJ;AAyCH,CAnED;;AAqEA,eAAehB,OAAO,CAAC,IAAD,EAAOS,kBAAP,CAAP,CAAkCI,QAAlC,CAAf","sourcesContent":["import React, { useCallback, useState } from 'react';\nimport { ITodoList } from '../../../../interfaces/ITodoList';\nimport { makeStyles, Grid, CardHeader, Card, CardActions, IconButton } from '@material-ui/core';\nimport { Add, Close } from '@material-ui/icons';\nimport DeleteTodo from '../../delete-todo';\nimport ListTasks from './listTask';\nimport FormCreateTask from '../../create-task';\nimport { ITask } from '../../../../interfaces/ITask';\nimport { createTaskAction } from '../../../../store/actions';\nimport { reset } from 'redux-form';\nimport { connect } from 'react-redux';\n\n\ninterface IProps{\n    todoList : ITodoList[];\n    onAddTask : (newTask : ITask) => void;\n}\n\nconst useStyles = makeStyles((theme) => ({\n    cardMedia: {\n        display: 'block',\n    },\n    cardGrid: {\n        marginLeft : theme.spacing(3),\n        width : '90%'\n    },\n}));\n\nconst mapDispatchToProps = (dispatch) => {\n    return({\n        onAddTask : (newTask : ITask) => {\n            dispatch(createTaskAction(newTask))\n            dispatch(reset('create-task'))\n        },\n\n    });\n}\n\nconst CardTodo : React.FC<IProps> = ({todoList, onAddTask}: IProps) => {\n    const classes = useStyles();\n    const [idTodo, setId] = useState<number>(0); \n\n    const[isCreateTask, setIsCreateTask] = useState(false);\n\n    const handleCreateTask = useCallback( (event) =>{\n        setIsCreateTask(true);\n        setId(event.currentTarget.value);\n    }, [setIsCreateTask]);\n\n    const handleCLoseForm = useCallback(() => {\n        setIsCreateTask(false);\n    }, [setIsCreateTask]);\n\n    const handleCreate = useCallback(values => {\n        const newTask : ITask = {\n            id_todo : idTodo!,\n            title: values.title,\n            is_completed : false\n        };\n\n        onAddTask(newTask);\n    }, [onAddTask, idTodo]);\n\n    console.log(idTodo, isCreateTask)\n    return(\n        <Grid container\n            direction = 'row'\n            justify = 'flex-start'\n            alignItems = 'flex-start' \n            spacing = {1}\n            className = {classes.cardGrid}\n        >  \n        )\n            {todoList.map((todo) => (\n                console.log(todo.id === idTodo)\n                // <Grid key = {todo.id} item xs={6} md={3}>\n                //     <Card>\n                //         <CardHeader\n                //             action= {\n                //                 isCreateTask && (todo.id === idTodo) ?    \n                //                     <IconButton  aria-label=\"close\" color=\"primary\" onClick = {handleCLoseForm}>\n                //                         <Close/>\n                //                     </IconButton>\n                //                     :  \n                //                     <IconButton  aria-label=\"add\" color=\"primary\" onClick = {handleCreateTask} value = {todo.id!} >\n                //                         <Add/>\n                //                     </IconButton>\n                                \n                //             }\n                //             title = {todo.title}\n                //             subheader = \"Ваши задачи: \"\n                //         />\n                //         <CardActions className={classes.cardMedia}>\n                //             {isCreateTask && (todo.id===idTodo) ?\n                //                 <FormCreateTask onSubmit = {handleCreate} />\n                //                 : null\n                //             }\n                //             <ListTasks idTodo = {todo.id!}/>\n                //             <DeleteTodo todo = {todo}/>\n                //         </CardActions>\n                //     </Card>\n                // </Grid>\n            ))}\n        </Grid>\n    );\n}\n\nexport default connect(null, mapDispatchToProps)(CardTodo);\n"]},"metadata":{},"sourceType":"module"}