{"ast":null,"code":"import { call, put, delay } from \"redux-saga/effects\";\nimport { fetch_create_user, fetch_login_user } from \"../../../services/services_user\";\nimport { CURRENT_USER, HIDE_ERROR, SHOW_ERROR } from \"../../actions/types\";\nexport function* workerLoginUser(action) {\n  const user = action.user;\n  const {\n    history\n  } = action;\n  const login_user = {\n    username: user.username,\n    password: user.password\n  };\n\n  try {\n    const data = yield call(fetch_login_user, login_user);\n    localStorage.setItem('token', data.token);\n    const current_user = data.user;\n    yield put({\n      type: CURRENT_USER,\n      current_user\n    });\n    const url = '/todo/' + current_user.id;\n    history.push(url);\n  } catch (error) {\n    console.log('ERROR_SAGA: ', error);\n    yield put({\n      type: SHOW_ERROR\n    });\n    yield delay(2000);\n    yield put({\n      type: HIDE_ERROR\n    });\n  }\n}\nexport function* workerCreateUser(action) {\n  const {\n    history\n  } = action;\n\n  try {\n    const data = yield call(fetch_create_user, action.user);\n\n    if (data.response === \"error\") {\n      yield put({\n        type: SHOW_ERROR\n      });\n      yield delay(2000);\n      yield put({\n        type: HIDE_ERROR\n      });\n    } else {\n      history.push('/');\n    }\n  } catch (error) {\n    console.log('ERROR_SAGA_SIGN_UP ', error);\n  }\n}\nexport function* workerResetPassword(action) {\n  yield console.log(action); // const password : string = action.password;\n  // const token = action.token\n  // const { history }  = action;\n  // yield call(fetch_reset_password, email, history);\n}\nexport function* workerSendEmail(action) {\n  const email = action.email;\n  const {\n    history\n  } = action;\n  yield call(fetchSendEmail, email, history);\n}","map":{"version":3,"sources":["/home/julia/ToDoList/my-app/src/store/saga/sagaUser/index.tsx"],"names":["call","put","delay","fetch_create_user","fetch_login_user","CURRENT_USER","HIDE_ERROR","SHOW_ERROR","workerLoginUser","action","user","history","login_user","username","password","data","localStorage","setItem","token","current_user","type","url","id","push","error","console","log","workerCreateUser","response","workerResetPassword","workerSendEmail","email","fetchSendEmail"],"mappings":"AAAA,SAASA,IAAT,EAA0BC,GAA1B,EAA+BC,KAA/B,QAA4C,oBAA5C;AACA,SAASC,iBAAT,EAA4BC,gBAA5B,QAA0E,iCAA1E;AACA,SAAqBC,YAArB,EAAgEC,UAAhE,EAA4EC,UAA5E,QAA8F,qBAA9F;AAIA,OAAO,UAAUC,eAAV,CAA0BC,MAA1B,EAAkC;AAErC,QAAMC,IAAY,GAAGD,MAAM,CAACC,IAA5B;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAcF,MAApB;AACA,QAAMG,UAAU,GAAG;AACfC,IAAAA,QAAQ,EAAGH,IAAI,CAACG,QADD;AAEfC,IAAAA,QAAQ,EAAGJ,IAAI,CAACI;AAFD,GAAnB;;AAIA,MAAG;AACC,UAAMC,IAAI,GAAI,MAAMf,IAAI,CAACI,gBAAD,EAAkBQ,UAAlB,CAAxB;AACAI,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BF,IAAI,CAACG,KAAnC;AAEA,UAAMC,YAAY,GAAGJ,IAAI,CAACL,IAA1B;AACA,UAAMT,GAAG,CAAC;AAACmB,MAAAA,IAAI,EAAGf,YAAR;AAAsBc,MAAAA;AAAtB,KAAD,CAAT;AAEA,UAAME,GAAY,GAAG,WAAWF,YAAY,CAACG,EAA7C;AACAX,IAAAA,OAAO,CAACY,IAAR,CAAaF,GAAb;AAEH,GAVD,CAUC,OAAMG,KAAN,EAAY;AACTC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,KAA5B;AACA,UAAMvB,GAAG,CAAC;AAACmB,MAAAA,IAAI,EAAGb;AAAR,KAAD,CAAT;AACA,UAAML,KAAK,CAAC,IAAD,CAAX;AACA,UAAMD,GAAG,CAAC;AAACmB,MAAAA,IAAI,EAAGd;AAAR,KAAD,CAAT;AACH;AACJ;AAGD,OAAO,UAAUqB,gBAAV,CAA2BlB,MAA3B,EAAkC;AAErC,QAAM;AAAEE,IAAAA;AAAF,MAAcF,MAApB;;AAEA,MAAG;AACC,UAAMM,IAAI,GAAG,MAAMf,IAAI,CAACG,iBAAD,EAAmBM,MAAM,CAACC,IAA1B,CAAvB;;AACA,QAAIK,IAAI,CAACa,QAAL,KAAkB,OAAtB,EAA8B;AAC1B,YAAM3B,GAAG,CAAC;AAACmB,QAAAA,IAAI,EAAGb;AAAR,OAAD,CAAT;AACA,YAAML,KAAK,CAAC,IAAD,CAAX;AACA,YAAMD,GAAG,CAAC;AAACmB,QAAAA,IAAI,EAAGd;AAAR,OAAD,CAAT;AACH,KAJD,MAIK;AACDK,MAAAA,OAAO,CAACY,IAAR,CAAa,GAAb;AACH;AACJ,GATD,CASC,OAAMC,KAAN,EAAY;AACTC,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAnC;AACH;AACJ;AAED,OAAO,UAAUK,mBAAV,CAA8BpB,MAA9B,EAAqC;AACxC,QAAMgB,OAAO,CAACC,GAAR,CAAYjB,MAAZ,CAAN,CADwC,CAExC;AACA;AACA;AAEA;AACH;AAED,OAAO,UAAUqB,eAAV,CAA0BrB,MAA1B,EAAiC;AACpC,QAAMsB,KAAc,GAAGtB,MAAM,CAACsB,KAA9B;AACA,QAAM;AAAEpB,IAAAA;AAAF,MAAeF,MAArB;AAEA,QAAMT,IAAI,CAACgC,cAAD,EAAiBD,KAAjB,EAAwBpB,OAAxB,CAAV;AACH","sourcesContent":["import { call, takeEvery, put, delay } from \"redux-saga/effects\" ;\nimport { fetch_create_user, fetch_login_user, fetch_reset_password } from \"../../../services/services_user\";\nimport { LOGIN_USER, CURRENT_USER, CREATE_USER, RESET_PASSWORD, HIDE_ERROR, SHOW_ERROR } from \"../../actions/types\";\nimport { IUser } from \"../../../interfaces/IUser\";\n\n\nexport function* workerLoginUser(action) {\n    \n    const user : IUser = action.user;\n    const { history } = action;\n    const login_user = {\n        username : user.username,\n        password : user.password!\n    };\n    try{\n        const data  = yield call(fetch_login_user,login_user);\n        localStorage.setItem('token', data.token);\n        \n        const current_user = data.user;\n        yield put({type : CURRENT_USER, current_user});\n        \n        const url : string = '/todo/' + current_user.id;\n        history.push(url);\n\n    }catch(error){\n        console.log('ERROR_SAGA: ', error);\n        yield put({type : SHOW_ERROR});\n        yield delay(2000)\n        yield put({type : HIDE_ERROR});\n    }\n}\n\n\nexport function* workerCreateUser(action){\n    \n    const { history } = action;\n    \n    try{\n        const data = yield call(fetch_create_user,action.user);\n        if (data.response === \"error\"){\n            yield put({type : SHOW_ERROR})\n            yield delay(2000)\n            yield put({type : HIDE_ERROR});\n        }else{\n            history.push('/');\n        }\n    }catch(error){\n        console.log('ERROR_SAGA_SIGN_UP ', error )\n    }\n}\n\nexport function* workerResetPassword(action){\n    yield console.log(action)\n    // const password : string = action.password;\n    // const token = action.token\n    // const { history }  = action;\n\n    // yield call(fetch_reset_password, email, history);\n}\n\nexport function* workerSendEmail(action){\n    const email : string = action.email;\n    const { history }  = action;\n\n    yield call(fetchSendEmail, email, history);\n}"]},"metadata":{},"sourceType":"module"}