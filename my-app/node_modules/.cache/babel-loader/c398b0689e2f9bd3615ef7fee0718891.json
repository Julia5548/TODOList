{"ast":null,"code":"import { call, takeEvery, put } from \"redux-saga/effects\";\nimport { fetch_create_user, fetch_login_user, fetch_reset_password } from \"../../../services/services_user\";\nimport { LOGIN_USER, CURRENT_USER, CREATE_USER, RESET_PASSWORD, ERROR_SIGN_IN, HIDE_ERROR } from \"../../actions/types\";\nexport function* watch_login_user() {\n  yield takeEvery(LOGIN_USER, worker_login_user);\n}\n\nfunction* worker_login_user(action) {\n  const user = action.user;\n  const {\n    history\n  } = action;\n  const login_user = {\n    username: user.username,\n    password: user.password\n  };\n\n  try {\n    const data = yield call(() => fetch_login_user(login_user));\n    localStorage.setItem('token', data.token);\n    const current_user = data.user;\n    yield put({\n      type: CURRENT_USER,\n      current_user\n    });\n    const url = '/todo/' + current_user.id;\n    history.push(url);\n  } catch (error) {\n    console.log('ERROR_SAGA: ', error);\n    yield put({\n      type: ERROR_SIGN_IN\n    });\n    yield call(delay, 3000);\n    yield put({\n      type: HIDE_ERROR\n    });\n  }\n}\n\nexport function* watch_create_user() {\n  yield takeEvery(CREATE_USER, worker_create_user);\n}\n\nfunction* worker_create_user(action) {\n  const {\n    history\n  } = action;\n  yield call(() => fetch_create_user(action.user, history));\n}\n\nexport function* watch_reset_password() {\n  yield takeEvery(RESET_PASSWORD, worker_reset_password);\n}\n\nfunction* worker_reset_password(action) {\n  const email = action.email;\n  const {\n    history\n  } = action;\n  yield call(() => fetch_reset_password(email, history));\n}","map":{"version":3,"sources":["/home/julia/ToDoList/my-app/src/store/saga/sagaUser/index.tsx"],"names":["call","takeEvery","put","fetch_create_user","fetch_login_user","fetch_reset_password","LOGIN_USER","CURRENT_USER","CREATE_USER","RESET_PASSWORD","ERROR_SIGN_IN","HIDE_ERROR","watch_login_user","worker_login_user","action","user","history","login_user","username","password","data","localStorage","setItem","token","current_user","type","url","id","push","error","console","log","delay","watch_create_user","worker_create_user","watch_reset_password","worker_reset_password","email"],"mappings":"AAAA,SAASA,IAAT,EAAeC,SAAf,EAA0BC,GAA1B,QAAqC,oBAArC;AAEA,SAASC,iBAAT,EAA4BC,gBAA5B,EAA8CC,oBAA9C,QAA0E,iCAA1E;AACA,SAASC,UAAT,EAAqBC,YAArB,EAAmCC,WAAnC,EAAgDC,cAAhD,EAAgEC,aAAhE,EAA+EC,UAA/E,QAAiG,qBAAjG;AAGA,OAAO,UAAUC,gBAAV,GAA4B;AAC/B,QAAMX,SAAS,CAACK,UAAD,EAAaO,iBAAb,CAAf;AACH;;AAED,UAAUA,iBAAV,CAA4BC,MAA5B,EAAoC;AAEhC,QAAMC,IAAY,GAAGD,MAAM,CAACC,IAA5B;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAcF,MAApB;AACA,QAAMG,UAAU,GAAG;AACfC,IAAAA,QAAQ,EAAGH,IAAI,CAACG,QADD;AAEfC,IAAAA,QAAQ,EAAGJ,IAAI,CAACI;AAFD,GAAnB;;AAIA,MAAG;AACC,UAAMC,IAAI,GAAI,MAAMpB,IAAI,CAAC,MAAMI,gBAAgB,CAACa,UAAD,CAAvB,CAAxB;AACAI,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BF,IAAI,CAACG,KAAnC;AAEA,UAAMC,YAAY,GAAGJ,IAAI,CAACL,IAA1B;AACA,UAAMb,GAAG,CAAC;AAACuB,MAAAA,IAAI,EAAGlB,YAAR;AAAsBiB,MAAAA;AAAtB,KAAD,CAAT;AAEA,UAAME,GAAY,GAAG,WAAWF,YAAY,CAACG,EAA7C;AACAX,IAAAA,OAAO,CAACY,IAAR,CAAaF,GAAb;AAEH,GAVD,CAUC,OAAMG,KAAN,EAAY;AACTC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,KAA5B;AACA,UAAM3B,GAAG,CAAC;AAACuB,MAAAA,IAAI,EAAGf;AAAR,KAAD,CAAT;AACA,UAAMV,IAAI,CAACgC,KAAD,EAAQ,IAAR,CAAV;AACA,UAAM9B,GAAG,CAAC;AAACuB,MAAAA,IAAI,EAAGd;AAAR,KAAD,CAAT;AACH;AACJ;;AAGD,OAAO,UAAUsB,iBAAV,GAA6B;AAChC,QAAMhC,SAAS,CAACO,WAAD,EAAc0B,kBAAd,CAAf;AACH;;AAED,UAAUA,kBAAV,CAA6BpB,MAA7B,EAAoC;AAEhC,QAAM;AAAEE,IAAAA;AAAF,MAAcF,MAApB;AAEA,QAAMd,IAAI,CAAC,MAAMG,iBAAiB,CAACW,MAAM,CAACC,IAAR,EAAcC,OAAd,CAAxB,CAAV;AACH;;AAED,OAAO,UAAUmB,oBAAV,GAAgC;AACnC,QAAMlC,SAAS,CAACQ,cAAD,EAAiB2B,qBAAjB,CAAf;AACH;;AAED,UAAUA,qBAAV,CAAgCtB,MAAhC,EAAuC;AACnC,QAAMuB,KAAc,GAAGvB,MAAM,CAACuB,KAA9B;AACA,QAAM;AAAErB,IAAAA;AAAF,MAAeF,MAArB;AAEA,QAAMd,IAAI,CAAC,MAAMK,oBAAoB,CAACgC,KAAD,EAAQrB,OAAR,CAA3B,CAAV;AACH","sourcesContent":["import { call, takeEvery, put } from \"redux-saga/effects\" ;\nimport { IUser } from \"../../../interface\";\nimport { fetch_create_user, fetch_login_user, fetch_reset_password } from \"../../../services/services_user\";\nimport { LOGIN_USER, CURRENT_USER, CREATE_USER, RESET_PASSWORD, ERROR_SIGN_IN, HIDE_ERROR } from \"../../actions/types\";\n\n\nexport function* watch_login_user(){\n    yield takeEvery(LOGIN_USER, worker_login_user);\n}\n\nfunction* worker_login_user(action) {\n    \n    const user : IUser = action.user;\n    const { history } = action;\n    const login_user = {\n        username : user.username,\n        password : user.password!\n    };\n    try{\n        const data  = yield call(() => fetch_login_user(login_user));\n        localStorage.setItem('token', data.token);\n        \n        const current_user = data.user;\n        yield put({type : CURRENT_USER, current_user});\n        \n        const url : string = '/todo/' + current_user.id;\n        history.push(url);\n\n    }catch(error){\n        console.log('ERROR_SAGA: ', error);\n        yield put({type : ERROR_SIGN_IN});\n        yield call(delay, 3000)\n        yield put({type : HIDE_ERROR});\n    }\n}\n\n\nexport function* watch_create_user(){\n    yield takeEvery(CREATE_USER, worker_create_user);\n}\n\nfunction* worker_create_user(action){\n    \n    const { history } = action;\n    \n    yield call(() => fetch_create_user(action.user, history));\n}\n\nexport function* watch_reset_password(){\n    yield takeEvery(RESET_PASSWORD, worker_reset_password);\n}\n\nfunction* worker_reset_password(action){\n    const email : string = action.email;\n    const { history }  = action;\n\n    yield call(() => fetch_reset_password(email, history));\n}"]},"metadata":{},"sourceType":"module"}