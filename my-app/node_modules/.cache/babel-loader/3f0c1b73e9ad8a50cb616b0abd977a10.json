{"ast":null,"code":"var _jsxFileName = \"/home/julia/todo/my-app/src/TodoList/pages/TodoList/index.tsx\";\nimport React, { useState } from 'react';\nimport { reduxForm, Field, reset } from 'redux-form';\nimport { makeStyles, Typography, TextField, Button, AppBar, Toolbar, Grid } from '@material-ui/core';\nimport { useHistory } from 'react-router-dom';\nimport ListTask from '../../components/ListTask';\n\nconst renderTextField = ({\n  input,\n  label,\n  meta: {\n    touched,\n    error,\n    invalid\n  },\n  ...custom\n}) => /*#__PURE__*/React.createElement(TextField, Object.assign({\n  autoComplete: label,\n  label: \"\\u041D\\u0430\\u0438\\u043C\\u0435\\u043D\\u043E\\u0432\\u0430\\u043D\\u0438\\u0435 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0438\",\n  margin: \"normal\",\n  fullWidth: true,\n  name: label,\n  error: touched && invalid,\n  helperText: touched && error,\n  required: true,\n  type: label,\n  variant: \"standard\"\n}, input, custom, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }\n}));\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  title: {\n    flexGrow: 1\n  },\n  submit: {\n    margin: theme.spacing(3.5, 0, 0, 2),\n    textAlign: 'center'\n  },\n  textField: {\n    textAlign: 'center',\n    marginLeft: theme.spacing(3),\n    color: theme.palette.text.secondary\n  }\n}));\nexport const WindowTask = props => {\n  const classes = useStyles();\n  const history = useHistory();\n  const [todoList, setTodo] = useState([]);\n  componentDidMount();\n\n  function getCookie(name) {\n    let cookieValue = null;\n\n    if (document.cookie && document.cookie !== '') {\n      const cookies = document.cookie.split(';');\n\n      for (let i = 0; i < cookies.length; i++) {\n        const cookie = cookies[i].trim(); // Does this cookie string begin with the name we want?\n\n        if (cookie.substring(0, name.length + 1) === name + '=') {\n          cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n          break;\n        }\n      }\n    }\n\n    return cookieValue;\n  }\n\n  function componentDidMount() {\n    console.log('Fetching...');\n    fetch('http://127.0.0.1:8000/api/task_list/', {\n      mode: 'cors'\n    }).then(response => response.json()).then(data => {\n      setTodo(data);\n    });\n  }\n\n  const handleSubmit = values => {\n    const newTodo = {\n      name: values.task,\n      id: Date.now(),\n      completed: false\n    };\n    setTodo(prev => [newTodo, ...prev]);\n    const csrftoken = getCookie('csrftoken');\n    const url = 'http://127.0.0.1:8000/api/task_create/';\n    fetch(url, {\n      mode: 'cors',\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json',\n        'X-CSRFToken': csrftoken\n      },\n      body: JSON.stringify(newTodo)\n    }).catch(function (error) {\n      console.log('ERROR:', error);\n    });\n    console.log(newTodo);\n    props.dispatch(reset('createTask'));\n  };\n\n  const toggleHandler = id => {\n    setTodo(prev => prev.map(todo => {\n      if (todo.id === id) {\n        todo.completed = !todo.completed;\n      }\n\n      return todo;\n    }));\n  };\n\n  const resultRemove = id => {\n    console.log(id);\n    const csrftoken = getCookie('csrftoken');\n    fetch('http://127.0.0.1:8000/api/task_delete/' + id + '/', {\n      mode: 'cors',\n      method: 'DELETE',\n      headers: {\n        'Content-type': 'application/json',\n        'X-CSRFToken': csrftoken\n      }\n    }).catch(function (error) {\n      console.log('ERROR:', error);\n    });\n    setTodo(prev => prev.filter(todo => todo.id !== id));\n  };\n\n  const todos = todoList;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AppBar, {\n    position: \"static\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Toolbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    className: classes.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 21\n    }\n  }, \"Name User\"), /*#__PURE__*/React.createElement(Button, {\n    color: \"inherit\",\n    onClick: () => history.push('/'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 21\n    }\n  }, \"\\u0412\\u044B\\u0445\\u043E\\u0434\"))), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: props.handleSubmit(handleSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    direction: \"row\",\n    justify: \"center\",\n    alignItems: \"flex-start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Field, {\n    name: \"task\",\n    component: renderTextField,\n    label: \"string\",\n    className: classes.textField,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    variant: \"contained\",\n    color: \"primary\",\n    className: classes.submit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 29\n    }\n  }, \"\\u0421\\u043E\\u0437\\u0434\\u0430\\u0442\\u044C\")))), /*#__PURE__*/React.createElement(ListTask, Object.assign({\n    todoList: todos,\n    onRemove: resultRemove,\n    onToggle: toggleHandler\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }\n  })));\n};\nconst form = reduxForm({\n  form: 'createTask'\n})(WindowTask);\nexport default form;","map":{"version":3,"sources":["/home/julia/todo/my-app/src/TodoList/pages/TodoList/index.tsx"],"names":["React","useState","reduxForm","Field","reset","makeStyles","Typography","TextField","Button","AppBar","Toolbar","Grid","useHistory","ListTask","renderTextField","input","label","meta","touched","error","invalid","custom","useStyles","theme","root","flexGrow","title","submit","margin","spacing","textAlign","textField","marginLeft","color","palette","text","secondary","WindowTask","props","classes","history","todoList","setTodo","componentDidMount","getCookie","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","console","log","fetch","mode","then","response","json","data","handleSubmit","values","newTodo","task","id","Date","now","completed","prev","csrftoken","url","method","headers","body","JSON","stringify","catch","dispatch","toggleHandler","map","todo","resultRemove","filter","todos","push","form"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\nimport { reduxForm, InjectedFormProps, Field, reset } from 'redux-form'\nimport { makeStyles, Typography, TextField, Button, AppBar, Toolbar, Grid} from '@material-ui/core'\nimport { useHistory } from 'react-router-dom'\nimport { ITodo } from '../../../interface'\nimport ListTask from '../../components/ListTask'\nimport { isNull } from 'util'\n\n\nconst renderTextField = ({\n    input, \n    label,\n    meta : {touched, error, invalid},\n    ...custom\n }) => (\n    <TextField\n        autoComplete = {label}\n        label = \"Наименование задачи\"\n        margin = 'normal'\n        fullWidth\n        name={label}\n        error={touched && invalid}\n        helperText={touched && error}\n        required\n        type = {label}\n        variant = 'standard'\n        {...input}\n        {...custom}\n    />\n)\n\nconst useStyles = makeStyles((theme) => ({\n\n    root : {\n        flexGrow : 1,\n    },\n    title : {\n        flexGrow: 1,\n    },\n    submit : {\n        margin: theme.spacing(3.5, 0, 0, 2),\n        textAlign: 'center',\n    },\n    textField :{\n        textAlign: 'center',\n        marginLeft: theme.spacing(3),\n        color: theme.palette.text.secondary,\n    },\n}))\n\nexport const WindowTask : React.FC<ITodo & InjectedFormProps<{}, ITodo>> = (props : any) => {\n\n    const classes = useStyles()\n    const history = useHistory()\n\n    const[todoList, setTodo] = useState<ITodo[]>([])\n\n    componentDidMount()\n\n    function getCookie(name : string) {\n        let cookieValue : string | null = null;\n        if (document.cookie && document.cookie !== '') {\n            const cookies = document.cookie.split(';');\n            for (let i = 0; i < cookies.length; i++) {\n                const cookie = cookies[i].trim();\n                // Does this cookie string begin with the name we want?\n                if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                    break;\n                }\n            }\n        }\n        return cookieValue;\n    }\n\n    function componentDidMount() {\n        console.log('Fetching...')\n        fetch('http://127.0.0.1:8000/api/task_list/',\n         {\n            mode: 'cors',\n        })\n        .then(response => response.json())\n        .then(data => {\n                setTodo(data)\n            }\n        )\n    }\n\n    const handleSubmit = (values: any) => {\n        \n        const newTodo : ITodo  =  {\n            name : values.task,\n            id : Date.now(),\n            completed : false\n        }\n\n        setTodo(prev => [newTodo, ...prev])\n        const csrftoken = getCookie('csrftoken');\n\n        const url = 'http://127.0.0.1:8000/api/task_create/'\n\n        fetch(url, {\n            mode : 'cors',\n            method: 'POST',\n            headers : {\n                'Content-type' : 'application/json',\n                'X-CSRFToken' : csrftoken!,\n\n            },\n            body : JSON.stringify(newTodo)\n        }).catch(function(error){\n            console.log('ERROR:' , error)\n        })\n        \n        console.log(newTodo)\n        \n        props.dispatch(reset('createTask'))\n    }\n\n     const toggleHandler = (id:number) =>{\n         setTodo(prev => \n             prev.map(todo => {\n                 if(todo.id === id){\n                     todo.completed = !todo.completed\n                 }\n                 return todo\n             }) \n         )\n     }\n\n     const resultRemove = (id : number) => {\n         console.log(id)\n        const csrftoken = getCookie('csrftoken');\n        fetch('http://127.0.0.1:8000/api/task_delete/'+ id + '/', {\n            mode : 'cors',\n            method: 'DELETE',\n            headers : {\n                'Content-type' : 'application/json',\n                'X-CSRFToken' : csrftoken!,\n\n            },\n        }).catch(function(error){\n            console.log('ERROR:' , error)\n        })\n        setTodo(prev => prev.filter(todo => todo.id !== id))\n     }\n\n     const todos = todoList\n    return(\n        <div className = {classes.root}>\n            <AppBar position = \"static\">\n                <Toolbar>\n                    <Typography variant=\"h6\" className = {classes.title}>\n                        Name User\n                    </Typography>\n                    <Button color=\"inherit\" onClick = {() => history.push('/')}>\n                        Выход\n                    </Button>\n                </Toolbar>\n            </AppBar>\n            <form onSubmit = {props.handleSubmit(handleSubmit)}>\n                    <Grid container\n                        spacing={2}\n                        direction=\"row\"\n                        justify=\"center\"\n                        alignItems=\"flex-start\">\n                        <Grid item xs >\n                            <Field name = \"task\" \n                            component = {renderTextField} \n                            label = \"string\"\n                            className = {classes.textField}/>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <Button \n                                type=\"submit\"\n                                variant = \"contained\"\n                                color = \"primary\"\n                                className = {classes.submit}>\n                                 Создать\n                            </Button>\n                        </Grid>\n                    </Grid>\n            </form>\n            <ListTask todoList = {todos} onRemove = {resultRemove} onToggle = {toggleHandler}  {...props} />                \n        </div>\n    )\n}\n\nconst form = reduxForm<{}, ITodo>({\n    form : 'createTask'\n})(WindowTask);\n\nexport default form;"]},"metadata":{},"sourceType":"module"}