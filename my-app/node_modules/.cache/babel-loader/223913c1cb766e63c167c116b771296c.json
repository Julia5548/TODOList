{"ast":null,"code":"var _jsxFileName = \"/home/julia/ToDoList/my-app/src/TodoList/pages/TodoList/index.tsx\";\nimport React, { useEffect, useState } from 'react';\nimport { reduxForm, Field } from 'redux-form';\nimport { makeStyles, Typography, TextField, Button, AppBar, Toolbar, Grid } from '@material-ui/core';\nimport ListTask from '../../components/ListTask';\nimport { useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nconst renderTextField = ({\n  input,\n  label,\n  meta: {\n    touched,\n    error,\n    invalid\n  },\n  ...custom\n}) => /*#__PURE__*/React.createElement(TextField, Object.assign({\n  autoComplete: label,\n  label: \"\\u041D\\u0430\\u0438\\u043C\\u0435\\u043D\\u043E\\u0432\\u0430\\u043D\\u0438\\u0435 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0438\",\n  margin: \"normal\",\n  fullWidth: true,\n  name: \"task\",\n  error: touched && invalid,\n  helperText: touched && error,\n  required: true,\n  type: label,\n  variant: \"standard\"\n}, input, custom, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }\n}));\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  title: {\n    flexGrow: 1\n  },\n  submit: {\n    margin: theme.spacing(3.5, 0, 0, 2),\n    textAlign: 'center'\n  },\n  textField: {\n    textAlign: 'center',\n    marginLeft: theme.spacing(3),\n    color: theme.palette.text.secondary\n  }\n}));\nexport const WindowTask = props => {\n  const classes = useStyles();\n  console.log('props');\n  const {\n    pk\n  } = props.match;\n  const history = props.history;\n  const [todoList, setTodo] = useState([]);\n  const [response, setResponse] = useState('');\n  const username = useSelector(state => state.user_data.username); //  console.log(\"PROPS \", props)\n  // console.log(\"MATCH \", useRouteMatch())\n  // console.log(\"PARAMS \", useParams())\n\n  const handleSubmit = values => {\n    const newTask = {\n      id: null,\n      user: pk,\n      name: values.task,\n      completed: false\n    };\n    props.onAddTask(newTask);\n    setResponse('create_task ' + newTask.name);\n    console.log('RESPONSE_CREATE : ', response);\n  };\n\n  const onToggle = task => {\n    props.onToggle(task);\n    setResponse(task.completed + ' ' + task.name);\n    console.log('RESPONSE_TOGGLE : ', response);\n  };\n\n  const onRemove = task => {\n    props.onRemove(task);\n    setResponse('remove_task ' + task.name);\n    console.log('RESPONSE_REMOVE : ', response);\n  };\n\n  const handleLogout = () => {\n    localStorage.removeItem('token');\n    props.onLogout();\n    history.push('/');\n  };\n\n  useEffect(() => {\n    if (localStorage.getItem('token')) {\n      console.log('FETCHING...');\n      fetch('http://127.0.0.1:8000/api/task_list/' + pk, {\n        mode: 'cors',\n        headers: {\n          Authorization: 'JWT ' + localStorage.getItem('token')\n        }\n      }).then(response => response.json()).then(data => {\n        setTodo(data); //console.log(data)\n      }).catch(error => console.log('ERROR1: ', error));\n    }\n  }, [response]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AppBar, {\n    position: \"static\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Toolbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    className: classes.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 21\n    }\n  }, username), /*#__PURE__*/React.createElement(Button, {\n    color: \"inherit\",\n    onClick: () => handleLogout(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 21\n    }\n  }, \"\\u0412\\u044B\\u0445\\u043E\\u0434\"))), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: props.handleSubmit(handleSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    direction: \"row\",\n    justify: \"center\",\n    alignItems: \"flex-start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Field, {\n    name: \"task\",\n    component: renderTextField,\n    label: \"string\",\n    className: classes.textField,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    name: \"create_task\",\n    type: \"submit\",\n    variant: \"contained\",\n    color: \"primary\",\n    className: classes.submit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 29\n    }\n  }, \"\\u0421\\u043E\\u0437\\u0434\\u0430\\u0442\\u044C\")))), /*#__PURE__*/React.createElement(ListTask, {\n    todoList: todoList,\n    onRemove: onRemove,\n    onToggle: onToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }\n  }));\n};\nconst form = reduxForm({\n  form: 'createTask'\n})(withRouter(WindowTask));\nexport default form;","map":{"version":3,"sources":["/home/julia/ToDoList/my-app/src/TodoList/pages/TodoList/index.tsx"],"names":["React","useEffect","useState","reduxForm","Field","makeStyles","Typography","TextField","Button","AppBar","Toolbar","Grid","ListTask","useSelector","withRouter","renderTextField","input","label","meta","touched","error","invalid","custom","useStyles","theme","root","flexGrow","title","submit","margin","spacing","textAlign","textField","marginLeft","color","palette","text","secondary","WindowTask","props","classes","console","log","pk","match","history","todoList","setTodo","response","setResponse","username","state","user_data","handleSubmit","values","newTask","id","user","name","task","completed","onAddTask","onToggle","onRemove","handleLogout","localStorage","removeItem","onLogout","push","getItem","fetch","mode","headers","Authorization","then","json","data","catch","form"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { reduxForm, InjectedFormProps, Field } from 'redux-form';\nimport { makeStyles, Typography, TextField, Button, AppBar, Toolbar, Grid} from '@material-ui/core';\nimport { useHistory, useParams, useRouteMatch, RouteComponentProps } from 'react-router';\nimport { ITodo } from '../../../interface';\nimport ListTask from '../../components/ListTask';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../../redux/reduxStore';\nimport { withRouter } from 'react-router-dom';\n\nconst renderTextField = ({\n    input, \n    label,\n    meta : {touched, error, invalid},\n    ...custom\n }) => (\n    <TextField\n        autoComplete = {label}\n        label = \"Наименование задачи\"\n        margin = 'normal'\n        fullWidth\n        name='task'\n        error={touched && invalid}\n        helperText={touched && error}\n        required\n        type = {label}\n        variant = 'standard'\n        {...input}\n        {...custom}\n    />\n)\n\nconst useStyles = makeStyles((theme) => ({\n\n    root : {\n        flexGrow : 1,\n    },\n    title : {\n        flexGrow: 1,\n    },\n    submit : {\n        margin: theme.spacing(3.5, 0, 0, 2),\n        textAlign: 'center',\n    },\n    textField :{\n        textAlign: 'center',\n        marginLeft: theme.spacing(3),\n        color: theme.palette.text.secondary,\n    },\n}))\n\n\nexport const WindowTask : React.FC<ITodo & InjectedFormProps<{}, ITodo> & RouteComponentProps<{pk: string}>> = (props : any) => {\n    const classes = useStyles();\n    console.log('props')\n    const { pk } = props.match;\n\n    const history = props.history;\n    const[todoList, setTodo] = useState<ITodo[]>([])\n    const [response, setResponse] = useState('')\n    const username = useSelector((state : RootState) => state.user_data.username)\n\n    //  console.log(\"PROPS \", props)\n    // console.log(\"MATCH \", useRouteMatch())\n    // console.log(\"PARAMS \", useParams())\n    const handleSubmit = ( values : any ) => {\n\n        const newTask : ITodo = {\n            id : null,\n            user : pk,\n            name : values.task,\n            completed : false\n        }\n        props.onAddTask(newTask)\n        setResponse('create_task ' + newTask.name)\n        console.log('RESPONSE_CREATE : ', response)\n    }\n\n    const onToggle = (task : ITodo) =>{\n        props.onToggle(task)\n        setResponse(task.completed + ' ' + task.name)\n        console.log('RESPONSE_TOGGLE : ', response)\n    }\n\n    const onRemove = (task : ITodo) =>{\n        props.onRemove(task)\n        setResponse('remove_task ' + task.name)\n        console.log('RESPONSE_REMOVE : ', response)\n    }\n\n    const handleLogout = () => {\n        localStorage.removeItem('token')\n        props.onLogout()\n        history.push('/')\n    }\n\n\n    useEffect(() => {\n        if(localStorage.getItem('token')){\n            console.log('FETCHING...')\n            fetch('http://127.0.0.1:8000/api/task_list/' + pk,\n            {\n                mode: 'cors',\n                headers: {\n                    Authorization : 'JWT ' + localStorage.getItem('token')\n                },\n            })\n            .then(response => response.json())\n            .then(data => {\n                setTodo(data)\n                //console.log(data)\n        \n            })\n            .catch((error) => console.log('ERROR1: ', error))\n        }\n    }, [response])\n\n\n    return(\n        <div className = {classes.root}>\n            <AppBar position = \"static\">\n                <Toolbar>\n                    <Typography variant=\"h6\" className = {classes.title}>\n                        {username}\n                    </Typography>\n                    <Button color=\"inherit\" onClick = {() => handleLogout()}>\n                        Выход\n                    </Button>\n                </Toolbar>\n            </AppBar>\n            <form onSubmit = {props.handleSubmit(handleSubmit)}>\n                    <Grid container\n                        spacing={2}\n                        direction=\"row\"\n                        justify=\"center\"\n                        alignItems=\"flex-start\">\n                        <Grid item xs >\n                            <Field name = \"task\" \n                            component = {renderTextField} \n                            label = \"string\"\n                            className = {classes.textField}/>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <Button \n                                name= \"create_task\"\n                                type=\"submit\"\n                                variant = \"contained\"\n                                color = \"primary\"\n                                className = {classes.submit}>\n                                 Создать\n                            </Button>\n                        </Grid>\n                    </Grid>    \n            </form>\n            <ListTask todoList = { todoList } onRemove = {onRemove} onToggle = {onToggle} />\n           \n        </div>\n    )\n}\n\nconst form = reduxForm<{}, ITodo>({\n    form : 'createTask'\n})(withRouter(WindowTask));\n\nexport default form;"]},"metadata":{},"sourceType":"module"}