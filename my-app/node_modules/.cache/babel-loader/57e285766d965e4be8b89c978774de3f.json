{"ast":null,"code":"var _jsxFileName = \"/home/julia/ToDoList/my-app/src/pages/todo-list/display-todo/components/listTask.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { makeStyles, Typography, Card, CardContent } from '@material-ui/core';\nimport DeleteTask from '../../delete-task';\nimport ToggleTask from '../../toggle-task';\nimport { fetchGetTask } from '../../../../services/services_task';\nimport { connect } from 'react-redux';\nimport { onInitalTaskAction } from '../../../../store/actions';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    paddingRight: theme.spacing(3),\n    margin: theme.spacing(1)\n  },\n  notCheck: {\n    flex: '1 0 auto'\n  },\n  check: {\n    flex: '1 0 auto',\n    textDecoration: 'line-through',\n    color: 'rgba(0, 0, 0, 0.12)',\n    boxShadow: 'none'\n  },\n  typography: {\n    marginLeft: theme.spacing(1.5)\n  }\n}));\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onInitialTask: task => {\n      dispatch(onInitalTaskAction(task));\n    }\n  };\n};\n\nconst mapStateToProps = state => ({\n  tasks: state.taskData.tasks\n});\n\nexport const ListTask = ({\n  idTodo,\n  tasks,\n  onInitialTask\n}) => {\n  const classes = useStyles();\n  const [taskList, setTaskList] = useState([]);\n  useEffect(() => {\n    try {\n      fetchGetTask(idTodo).then(task => setTaskList(task));\n      console.log('proverka');\n    } catch (error) {\n      console.log('ERROR: ', error);\n    }\n  }, [tasks]);\n  mapDispatchToProps.initialTask();\n\n  if (taskList.find(task => task.id_todo === idTodo) === undefined) {\n    return /*#__PURE__*/React.createElement(Typography, {\n      className: classes.typography,\n      variant: \"h6\",\n      component: \"h6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }\n    }, \"\\u0417\\u0430\\u0434\\u0430\\u0447 \\u043D\\u0435\\u0442!\");\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, taskList.map(task => {\n    let classCheked = classes.notCheck;\n\n    if (task.is_completed) {\n      classCheked = classes.check;\n    }\n\n    if (task.id_todo === idTodo) {\n      return /*#__PURE__*/React.createElement(Card, {\n        key: task.id,\n        className: classes.root,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(ToggleTask, {\n        toggleTask: task,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(CardContent, {\n        className: classCheked,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Typography, {\n        variant: \"h6\",\n        component: \"h6\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 33\n        }\n      }, task.title)), /*#__PURE__*/React.createElement(DeleteTask, {\n        removeTask: task,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 29\n        }\n      }));\n    }\n  }));\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(ListTask);","map":{"version":3,"sources":["/home/julia/ToDoList/my-app/src/pages/todo-list/display-todo/components/listTask.tsx"],"names":["React","useState","useEffect","makeStyles","Typography","Card","CardContent","DeleteTask","ToggleTask","fetchGetTask","connect","onInitalTaskAction","useStyles","theme","root","display","paddingRight","spacing","margin","notCheck","flex","check","textDecoration","color","boxShadow","typography","marginLeft","mapDispatchToProps","dispatch","onInitialTask","task","mapStateToProps","state","tasks","taskData","ListTask","idTodo","classes","taskList","setTaskList","then","console","log","error","initialTask","find","id_todo","undefined","map","classCheked","is_completed","id","title"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { makeStyles, Typography, Card, CardContent } from '@material-ui/core';\nimport { ITask } from '../../../../interfaces/ITask';\nimport DeleteTask  from '../../delete-task';\nimport ToggleTask from '../../toggle-task';\nimport { fetchGetTask } from '../../../../services/services_task';\nimport { connect } from 'react-redux';\nimport { onInitalTaskAction } from '../../../../store/actions';\n\n\ninterface IProps {\n    idTodo : number;\n    tasks: ITask[];\n    onInitialTask(task : ITask) : void;\n}\n\nconst useStyles = makeStyles((theme) => ({\n\n    root: {\n        display: 'flex',\n        paddingRight : theme.spacing(3),\n        margin : theme.spacing(1),\n      },\n      notCheck :{\n        flex: '1 0 auto',\n      },\n      check: {\n        flex: '1 0 auto',\n        textDecoration : 'line-through',\n        color: 'rgba(0, 0, 0, 0.12)',\n        boxShadow: 'none',\n      },\n      typography: {\n        marginLeft : theme.spacing(1.5),\n      },\n}))\n\nconst mapDispatchToProps = (dispatch) => {\n    return({\n        onInitialTask : (task : ITask) =>{\n            dispatch(onInitalTaskAction(task))\n        }\n    });\n}\n\n\nconst mapStateToProps = (state) => ({\n    tasks : state.taskData.tasks\n})\n\nexport const ListTask : React.FC<IProps> = ({idTodo, tasks, onInitialTask} : IProps) => {\n\n    const classes = useStyles();\n    const [taskList, setTaskList] = useState<ITask[]>([]);\n\n    useEffect(() => {\n        try{\n            fetchGetTask(idTodo)\n                .then((task) => setTaskList(task));\n                console.log('proverka')\n        }catch(error){ \n            console.log('ERROR: ', error);\n        }\n    },[tasks]);\n\n    mapDispatchToProps.initialTask()\n    if(taskList.find((task) => task.id_todo===idTodo) === undefined){\n        return(\n            <Typography className = {classes.typography} variant = \"h6\" component = \"h6\">\n                Задач нет!\n            </Typography>\n        );\n    }\n    return(\n        <div>\n            {taskList.map((task) => {\n                let classCheked = classes.notCheck\n                if(task.is_completed){\n                    classCheked = classes.check\n                }\n                if(task.id_todo === idTodo){\n                    return(\n                        <Card key = {task.id}  className = {classes.root}>\n                            <ToggleTask toggleTask = {task} />\n                            <CardContent className = {classCheked}>\n                                <Typography variant = \"h6\" component = \"h6\">\n                                    {task.title}\n                                </Typography>\n                            </CardContent>\n                            <DeleteTask removeTask = {task}/>\n                        </Card>\n                    );\n                }\n            })}\n        </div>\n    );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ListTask);"]},"metadata":{},"sourceType":"module"}