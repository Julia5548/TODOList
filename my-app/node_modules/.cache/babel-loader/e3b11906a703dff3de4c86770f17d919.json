{"ast":null,"code":"var _jsxFileName = \"/home/julia/ToDoList/my-app/src/ pages/User.tsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Route from '../Router';\nimport { takeEvery } from \"redux-saga/effects\";\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAddTask: newTask => {\n      dispatch(addTaskAction(newTask));\n    }\n  };\n};\n\nconst addTaskAction = newTask => {\n  return {\n    type: 'CREATE_TASK',\n    newTask\n  };\n};\n\nfunction getCookie(name) {\n  let cookieValue = null;\n\n  if (document.cookie && document.cookie !== '') {\n    const cookies = document.cookie.split(';');\n\n    for (let i = 0; i < cookies.length; i++) {\n      const cookie = cookies[i].trim(); // Does this cookie string begin with the name we want?\n\n      if (cookie.substring(0, name.length + 1) === name + '=') {\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n        break;\n      }\n    }\n  }\n\n  return cookieValue;\n}\n\nexport function* watchCreateTask() {\n  yield takeEvery('CREATE_TASK', workCreateTask);\n}\n\nfunction* workCreateTask(action) {\n  console.log(action.newTask); // const csrftoken = getCookie('csrftoken');\n  // const url = 'http://127.0.0.1:8000/api/task_create/'\n  // try{\n  //     const data = yield call(() => {\n  //         fetch(url, {\n  //             mode : 'cors',\n  //             method: 'POST',\n  //             headers : {\n  //                 'Content-type' : 'application/json',\n  //                 'X-CSRFToken' : csrftoken!,\n  //             },\n  //             body : JSON.stringify(action.newTask)\n  //         }).catch(function(error){\n  //             console.log('ERROR:' , error)\n  //         })\n  //     })\n  //     yield console.log(`response = ${JSON.stringify(data)}`); \n  // } catch(error){\n  //     console.log(error)\n  // }\n}\n\nexport const User = props => {\n  return /*#__PURE__*/React.createElement(Route, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }));\n};\nexport default connect(null, mapDispatchToProps)(User);","map":{"version":3,"sources":["/home/julia/ToDoList/my-app/src/ pages/User.tsx"],"names":["React","connect","Route","takeEvery","mapDispatchToProps","dispatch","onAddTask","newTask","addTaskAction","type","getCookie","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","watchCreateTask","workCreateTask","action","console","log","User","props"],"mappings":";AAAA,OAAOA,KAAP,MAA2C,OAA3C;AACA,SAASC,OAAT,QAAqC,aAArC;AACA,OAAOC,KAAP,MAAkB,WAAlB;AAGA,SAAoBC,SAApB,QAAqC,oBAArC;;AAEA,MAAMC,kBAAkB,GAAIC,QAAD,IAAc;AAErC,SAAO;AACHC,IAAAA,SAAS,EAAIC,OAAD,IAAqB;AAC7BF,MAAAA,QAAQ,CAACG,aAAa,CAACD,OAAD,CAAd,CAAR;AACH;AAHE,GAAP;AAKH,CAPD;;AASA,MAAMC,aAAa,GAAID,OAAD,IAAoB;AACtC,SAAO;AACHE,IAAAA,IAAI,EAAE,aADH;AAEHF,IAAAA;AAFG,GAAP;AAIH,CALD;;AAOA,SAASG,SAAT,CAAmBC,IAAnB,EAAkC;AAC9B,MAAIC,WAA2B,GAAG,IAAlC;;AACA,MAAIC,QAAQ,CAACC,MAAT,IAAmBD,QAAQ,CAACC,MAAT,KAAoB,EAA3C,EAA+C;AAC3C,UAAMC,OAAO,GAAGF,QAAQ,CAACC,MAAT,CAAgBE,KAAhB,CAAsB,GAAtB,CAAhB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAAO,CAACG,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrC,YAAMH,MAAM,GAAGC,OAAO,CAACE,CAAD,CAAP,CAAWE,IAAX,EAAf,CADqC,CAErC;;AACA,UAAIL,MAAM,CAACM,SAAP,CAAiB,CAAjB,EAAoBT,IAAI,CAACO,MAAL,GAAc,CAAlC,MAA0CP,IAAI,GAAG,GAArD,EAA2D;AACvDC,QAAAA,WAAW,GAAGS,kBAAkB,CAACP,MAAM,CAACM,SAAP,CAAiBT,IAAI,CAACO,MAAL,GAAc,CAA/B,CAAD,CAAhC;AACA;AACH;AACJ;AACJ;;AACD,SAAON,WAAP;AACH;;AAED,OAAO,UAAUU,eAAV,GAA2B;AAC9B,QAAMnB,SAAS,CAAC,aAAD,EAAgBoB,cAAhB,CAAf;AACH;;AAED,UAAUA,cAAV,CAAyBC,MAAzB,EAAiC;AAE5BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACjB,OAAnB,EAF4B,CAG7B;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AAED,OAAO,MAAMoB,IAAI,GAAIC,KAAD,IAAiB;AACjC,sBACI,oBAAC,KAAD,oBAAWA,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADJ;AAGH,CAJM;AAMP,eAAe3B,OAAO,CAAC,IAAD,EAAOG,kBAAP,CAAP,CAAkCuB,IAAlC,CAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { connect, useDispatch } from 'react-redux';\nimport Route from '../Router'\nimport { ITodo } from '../interface';\nimport { reset } from 'redux-form';\nimport { call, put, takeEvery } from \"redux-saga/effects\" ;\n\nconst mapDispatchToProps = (dispatch) => {\n\n    return({\n        onAddTask : (newTask : ITodo) => {\n            dispatch(addTaskAction(newTask))\n        }\n    })\n}\n\nconst addTaskAction = (newTask : ITodo) =>{\n    return {\n        type: 'CREATE_TASK',\n        newTask\n    }\n}\n\nfunction getCookie(name : string) {\n    let cookieValue : string | null = null;\n    if (document.cookie && document.cookie !== '') {\n        const cookies = document.cookie.split(';');\n        for (let i = 0; i < cookies.length; i++) {\n            const cookie = cookies[i].trim();\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\n\nexport function* watchCreateTask(){\n    yield takeEvery('CREATE_TASK', workCreateTask)\n}\n\nfunction* workCreateTask(action) {\n\n     console.log(action.newTask)\n    // const csrftoken = getCookie('csrftoken');\n    // const url = 'http://127.0.0.1:8000/api/task_create/'\n        \n    // try{\n    //     const data = yield call(() => {\n    //         fetch(url, {\n    //             mode : 'cors',\n    //             method: 'POST',\n    //             headers : {\n    //                 'Content-type' : 'application/json',\n    //                 'X-CSRFToken' : csrftoken!,\n    //             },\n    //             body : JSON.stringify(action.newTask)\n    //         }).catch(function(error){\n    //             console.log('ERROR:' , error)\n    //         })\n    //     })\n    //     yield console.log(`response = ${JSON.stringify(data)}`); \n    // } catch(error){\n    //     console.log(error)\n    // }\n}\n\nexport const User = (props : any) => {\n    return (\n        <Route {...props}/>\n    );\n}\n\nexport default connect(null, mapDispatchToProps)(User);"]},"metadata":{},"sourceType":"module"}