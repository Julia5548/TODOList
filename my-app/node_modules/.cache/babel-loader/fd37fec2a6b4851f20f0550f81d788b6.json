{"ast":null,"code":"var _jsxFileName = \"/home/julia/ToDoList/my-app/src/pages/User.tsx\";\nimport React, { useEffect } from 'react';\nimport { connect, useSelector } from 'react-redux';\nimport Route from '../routes';\nimport { onCurrentUserAction, onLogoutAction } from '../store/actions';\nimport { onGetTokenAction, onGetUserAction } from '../store/actions';\nimport { fetchGetDataUser } from '../services/services_user';\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onGetToken: () => {\n      dispatch(onGetTokenAction());\n    },\n    onCurrentUser: current_user => {\n      dispatch(onCurrentUserAction(current_user));\n    },\n    onGetUser: () => {\n      dispatch(onGetUserAction());\n    },\n    onLogout: () => {\n      dispatch(onLogoutAction());\n    }\n  };\n};\n\nconst mapStateToProps = state => ({\n  username: state.user_data.username,\n  isErrorAuth: state.user_data.isErrorAuth\n});\n\nconst User = props => {\n  if (localStorage.getItem('token')) {\n    props.onGetToken();\n  }\n\n  const current_state_user = useSelector(state => state.user_data.isLoggedIn);\n  useEffect(() => {\n    if (current_state_user) {\n      try {\n        const result = fetchGetDataUser();\n        const data = result.user;\n        console.log(result); // if(current_user.id !== undefined){\n        //     props.onCurrentUser(current_user);\n        // }else{\n        //     props.onLogout();\n        // }\n      } catch (error) {\n        console.log('ERROR: ', error);\n      }\n    }\n  }, [current_state_user]);\n  return /*#__PURE__*/React.createElement(Route, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(User);","map":{"version":3,"sources":["/home/julia/ToDoList/my-app/src/pages/User.tsx"],"names":["React","useEffect","connect","useSelector","Route","onCurrentUserAction","onLogoutAction","onGetTokenAction","onGetUserAction","fetchGetDataUser","mapDispatchToProps","dispatch","onGetToken","onCurrentUser","current_user","onGetUser","onLogout","mapStateToProps","state","username","user_data","isErrorAuth","User","props","localStorage","getItem","current_state_user","isLoggedIn","result","data","user","console","log","error"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,aAArC;AACA,OAAOC,KAAP,MAAkB,WAAlB;AAEA,SAAUC,mBAAV,EAA+BC,cAA/B,QAAqD,kBAArD;AACA,SAASC,gBAAT,EAA4BC,eAA5B,QAAkD,kBAAlD;AAEA,SAASC,gBAAT,QAAiC,2BAAjC;;AAGA,MAAMC,kBAAkB,GAAIC,QAAD,IAAc;AACrC,SAAO;AAEHC,IAAAA,UAAU,EAAG,MAAM;AACfD,MAAAA,QAAQ,CAACJ,gBAAgB,EAAjB,CAAR;AACH,KAJE;AAMHM,IAAAA,aAAa,EAAIC,YAAD,IAAyB;AACrCH,MAAAA,QAAQ,CAACN,mBAAmB,CAACS,YAAD,CAApB,CAAR;AACH,KARE;AASHC,IAAAA,SAAS,EAAG,MAAM;AACdJ,MAAAA,QAAQ,CAACH,eAAe,EAAhB,CAAR;AACH,KAXE;AAYHQ,IAAAA,QAAQ,EAAG,MAAM;AACbL,MAAAA,QAAQ,CAACL,cAAc,EAAf,CAAR;AACH;AAdE,GAAP;AAgBH,CAjBD;;AAmBA,MAAMW,eAAe,GAAIC,KAAD,KAAY;AAChCC,EAAAA,QAAQ,EAAGD,KAAK,CAACE,SAAN,CAAgBD,QADK;AAEhCE,EAAAA,WAAW,EAAGH,KAAK,CAACE,SAAN,CAAgBC;AAFE,CAAZ,CAAxB;;AAKA,MAAMC,IAAI,GAAIC,KAAD,IAAiB;AAE1B,MAAIC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAJ,EAAkC;AAC9BF,IAAAA,KAAK,CAACX,UAAN;AACH;;AAED,QAAMc,kBAAkB,GAAGvB,WAAW,CAAEe,KAAD,IAAuBA,KAAK,CAACE,SAAN,CAAgBO,UAAxC,CAAtC;AAEA1B,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGyB,kBAAH,EAAsB;AAClB,UAAG;AACK,cAAME,MAAM,GAAGnB,gBAAgB,EAA/B;AACA,cAAMoB,IAAI,GAAGD,MAAM,CAACE,IAApB;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ,EAHL,CAIK;AACA;AACA;AACA;AACA;AACP,OATD,CASC,OAAMK,KAAN,EAAY;AACTF,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBC,KAAvB;AACH;AACJ;AACJ,GAfQ,EAeN,CAACP,kBAAD,CAfM,CAAT;AAiBA,sBACI,oBAAC,KAAD,oBAAWH,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADJ;AAGH,CA5BD;;AA8BA,eAAerB,OAAO,CAACe,eAAD,EAAkBP,kBAAlB,CAAP,CAA6CY,IAA7C,CAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport { connect, useSelector } from 'react-redux';\nimport Route from '../routes';\nimport { RootState } from '../store/reducers';\nimport {  onCurrentUserAction, onLogoutAction } from '../store/actions';\nimport { onGetTokenAction , onGetUserAction} from '../store/actions';\nimport { IUser } from '../interfaces/IUser';\nimport { fetchGetDataUser } from '../services/services_user';\n\n\nconst mapDispatchToProps = (dispatch) => {\n    return({\n        \n        onGetToken : () => { \n            dispatch(onGetTokenAction()) \n        },\n\n        onCurrentUser : (current_user: IUser) => { \n            dispatch(onCurrentUserAction(current_user))\n        },\n        onGetUser : () => {\n            dispatch(onGetUserAction())\n        },\n        onLogout : () => { \n            dispatch(onLogoutAction()) \n        }\n    })\n}\n\nconst mapStateToProps = (state) => ({\n    username : state.user_data.username,\n    isErrorAuth : state.user_data.isErrorAuth\n})\n\nconst User = (props : any) => {\n\n    if (localStorage.getItem('token')){\n        props.onGetToken();\n    }\n\n    const current_state_user = useSelector((state : RootState) => state.user_data.isLoggedIn);\n\n    useEffect(() => {\n        if(current_state_user){\n            try{\n                    const result = fetchGetDataUser()\n                    const data = result.user\n                    console.log(result)\n                    // if(current_user.id !== undefined){\n                    //     props.onCurrentUser(current_user);\n                    // }else{\n                    //     props.onLogout();\n                    // }\n            }catch(error){\n                console.log('ERROR: ', error)\n            }\n        }\n    }, [current_state_user])\n\n    return (\n        <Route {...props}/>\n    );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(User);"]},"metadata":{},"sourceType":"module"}