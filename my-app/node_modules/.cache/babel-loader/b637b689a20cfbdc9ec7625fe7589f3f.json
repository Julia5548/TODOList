{"ast":null,"code":"import { getCookie } from './cookie';\nconst csrftoken = getCookie('csrftoken');\n\nconst dataFetch = (url, data) => {\n  return new Request(url, {\n    mode: 'cors',\n    headers: {\n      'Content-type': 'application/json',\n      'X-CSRFToken': csrftoken\n    },\n    method: 'POST',\n    body: JSON.stringify(data)\n  });\n};\n\nexport const fetchCreateTodo = async sortTodo => {\n  const csrftoken = getCookie('csrftoken');\n  const url = 'http://127.0.0.1:8000/api/v1/todo/create/';\n  const response = fetch(url, {\n    mode: 'cors',\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json',\n      'X-CSRFToken': csrftoken,\n      Authorization: 'JWT ' + localStorage.getItem('token')\n    },\n    body: JSON.stringify(sortTodo)\n  });\n  const data = response.then(response => response.json()).catch(function (error) {\n    console.log('ERROR:', error);\n  });\n  return await data;\n};\nexport const fetchRemoveTodo = sortTodo => {\n  const csrftoken = getCookie('csrftoken');\n  const url = 'http://127.0.0.1:8000/api/v1/todo/delete/' + sortTodo.id + '/';\n  fetch(url, {\n    mode: 'cors',\n    method: 'DELETE',\n    headers: {\n      'Content-type': 'application/json',\n      'X-CSRFToken': csrftoken,\n      Authorization: 'JWT ' + localStorage.getItem('token')\n    }\n  }).then(response => {\n    console.log('deleted : ', response);\n  }).catch(function (error) {\n    console.log('ERROR:', error);\n  });\n};\nexport async function fetchGetTodo() {\n  const url = 'http://127.0.0.1:8000/api/v1/todo/list/';\n  const response = await fetch(url, {\n    mode: 'cors',\n    method: 'GET',\n    headers: {\n      Authorization: 'JWT ' + localStorage.getItem('token')\n    }\n  });\n  return await response.json();\n}","map":{"version":3,"sources":["/home/julia/ToDoList/my-app/src/services/servicesTodo.tsx"],"names":["getCookie","csrftoken","dataFetch","url","data","Request","mode","headers","method","body","JSON","stringify","fetchCreateTodo","sortTodo","response","fetch","Authorization","localStorage","getItem","then","json","catch","error","console","log","fetchRemoveTodo","id","fetchGetTodo"],"mappings":"AAAA,SAASA,SAAT,QAA0B,UAA1B;AAIA,MAAMC,SAAS,GAAGD,SAAS,CAAC,WAAD,CAA3B;;AAEA,MAAME,SAAS,GAAG,CAACC,GAAD,EAAeC,IAAf,KAAwB;AACtC,SACI,IAAIC,OAAJ,CAAYF,GAAZ,EAAgB;AACZG,IAAAA,IAAI,EAAG,MADK;AAERC,IAAAA,OAAO,EAAE;AACL,sBAAiB,kBADZ;AAEL,qBAAgBN;AAFX,KAFD;AAMZO,IAAAA,MAAM,EAAG,MANG;AAOZC,IAAAA,IAAI,EAAGC,IAAI,CAACC,SAAL,CAAeP,IAAf;AAPK,GAAhB,CADJ;AAWH,CAZD;;AAcA,OAAO,MAAMQ,eAAe,GAAG,MAAOC,QAAP,IAA8B;AAEzD,QAAMZ,SAAS,GAAGD,SAAS,CAAC,WAAD,CAA3B;AACA,QAAMG,GAAG,GAAG,2CAAZ;AAEA,QAAMW,QAAQ,GAAGC,KAAK,CAACZ,GAAD,EAAM;AACxBG,IAAAA,IAAI,EAAG,MADiB;AAExBE,IAAAA,MAAM,EAAE,MAFgB;AAGxBD,IAAAA,OAAO,EAAG;AACN,sBAAiB,kBADX;AAEN,qBAAgBN,SAFV;AAGNe,MAAAA,aAAa,EAAG,SAASC,YAAY,CAACC,OAAb,CAAqB,OAArB;AAHnB,KAHc;AAQxBT,IAAAA,IAAI,EAAGC,IAAI,CAACC,SAAL,CAAeE,QAAf;AARiB,GAAN,CAAtB;AAUA,QAAMT,IAAI,GAAGU,QAAQ,CAACK,IAAT,CAAcL,QAAQ,IAC/BA,QAAQ,CAACM,IAAT,EADS,EAEXC,KAFW,CAEL,UAASC,KAAT,EAAe;AACnBC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAuBF,KAAvB;AACH,GAJY,CAAb;AAMA,SAAO,MAAMlB,IAAb;AACH,CAtBM;AAwBP,OAAO,MAAMqB,eAAe,GAAIZ,QAAD,IAA0B;AAErD,QAAMZ,SAAS,GAAGD,SAAS,CAAC,WAAD,CAA3B;AACA,QAAMG,GAAG,GAAG,8CAA8CU,QAAQ,CAACa,EAAvD,GAA4D,GAAxE;AAEAX,EAAAA,KAAK,CAACZ,GAAD,EAAM;AACPG,IAAAA,IAAI,EAAG,MADA;AAEPE,IAAAA,MAAM,EAAE,QAFD;AAGPD,IAAAA,OAAO,EAAG;AACN,sBAAiB,kBADX;AAEN,qBAAgBN,SAFV;AAGNe,MAAAA,aAAa,EAAG,SAASC,YAAY,CAACC,OAAb,CAAqB,OAArB;AAHnB;AAHH,GAAN,CAAL,CAQGC,IARH,CAQSL,QAAD,IAAc;AAClBS,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BV,QAA1B;AACH,GAVD,EAUGO,KAVH,CAUS,UAASC,KAAT,EAAe;AACpBC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAuBF,KAAvB;AACH,GAZD;AAaH,CAlBM;AAoBP,OAAO,eAAeK,YAAf,GAA6B;AAEhC,QAAMxB,GAAG,GAAG,yCAAZ;AAEA,QAAMW,QAAQ,GAAG,MAAMC,KAAK,CAACZ,GAAD,EAAM;AAC9BG,IAAAA,IAAI,EAAG,MADuB;AAE9BE,IAAAA,MAAM,EAAE,KAFsB;AAG9BD,IAAAA,OAAO,EAAG;AACNS,MAAAA,aAAa,EAAG,SAASC,YAAY,CAACC,OAAb,CAAqB,OAArB;AADnB;AAHoB,GAAN,CAA5B;AAQA,SAAO,MAAMJ,QAAQ,CAACM,IAAT,EAAb;AACH","sourcesContent":["import { getCookie } from './cookie';\nimport { ITodoList } from '../interfaces/ITodoList';\n\n\nconst csrftoken = getCookie('csrftoken');\n\nconst dataFetch = (url : string, data) => {\n    return (\n        new Request(url,{\n            mode : 'cors',\n                headers: {\n                    'Content-type' : 'application/json',\n                    'X-CSRFToken' : csrftoken!,\n                },\n            method : 'POST',\n            body : JSON.stringify(data)\n        })\n    );\n}\n\nexport const fetchCreateTodo = async (sortTodo: ITodoList) =>{\n    \n    const csrftoken = getCookie('csrftoken');\n    const url = 'http://127.0.0.1:8000/api/v1/todo/create/';\n\n    const response = fetch(url, {\n        mode : 'cors',\n        method: 'POST',\n        headers : {\n            'Content-type' : 'application/json',\n            'X-CSRFToken' : csrftoken!,\n            Authorization : 'JWT ' + localStorage.getItem('token')\n        },\n        body : JSON.stringify(sortTodo)\n    });\n    const data = response.then(response => \n        response.json()\n    ).catch(function(error){\n        console.log('ERROR:' , error);\n    });\n    \n    return await data;\n}\n\nexport const fetchRemoveTodo = (sortTodo : ITodoList) => {\n    \n    const csrftoken = getCookie('csrftoken');\n    const url = 'http://127.0.0.1:8000/api/v1/todo/delete/' + sortTodo.id + '/';\n    \n    fetch(url, {\n        mode : 'cors',\n        method: 'DELETE',\n        headers : {\n            'Content-type' : 'application/json',\n            'X-CSRFToken' : csrftoken!,\n            Authorization : 'JWT ' + localStorage.getItem('token')\n        },\n    }).then((response) => {\n        console.log('deleted : ', response);\n    }).catch(function(error){\n        console.log('ERROR:' , error);\n    });\n}\n\nexport async function fetchGetTodo(){\n    \n    const url = 'http://127.0.0.1:8000/api/v1/todo/list/';\n    \n    const response = await fetch(url, {\n        mode : 'cors',\n        method: 'GET',\n        headers : {\n            Authorization : 'JWT ' + localStorage.getItem('token')\n        },\n    });\n\n    return await response.json();\n}\n"]},"metadata":{},"sourceType":"module"}