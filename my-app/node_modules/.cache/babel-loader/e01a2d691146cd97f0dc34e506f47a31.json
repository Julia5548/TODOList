{"ast":null,"code":"var _jsxFileName = \"/home/julia/ToDoList/my-app/src/pages/todo-list/display-todo/index.tsx\";\nimport React, { useCallback, useEffect } from 'react';\nimport { makeStyles, Typography, Button, AppBar, Toolbar } from '@material-ui/core';\nimport FormCreateTask from './components/formCreateTodo';\nimport { connect } from 'react-redux';\nimport { onLogoutAction, createTodoAction, getTodoAction } from '../../../store/actions';\nimport { reset } from 'redux-form';\nimport CardTodo from './components/cardList';\nimport { push } from 'connected-react-router';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  title: {\n    flexGrow: 1\n  },\n  cardMedia: {\n    display: 'block'\n  }\n}));\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onCreateTodo: sortTodo => {\n      dispatch(createTodoAction(sortTodo));\n      dispatch(reset('create-todo'));\n    },\n    onLogout: () => {\n      dispatch(onLogoutAction());\n    },\n    onGetTodos: () => {\n      dispatch(getTodoAction());\n    }\n  };\n};\n\nconst mapStateToProps = state => ({\n  todos: state.todoListData.todos,\n  username: state.user_data.username\n});\n\nexport const DisplayTodo = ({\n  onLogout,\n  onGetTodos,\n  onCreateTodo,\n  ...props\n}) => {\n  const classes = useStyles();\n  const [selectedDate, setSelectedDate] = React.useState(new Date());\n  useEffect(() => {\n    onGetTodos();\n  }, [onGetTodos]);\n  const handleLogout = useCallback(() => {\n    localStorage.removeItem('token');\n    onLogout();\n    push('/');\n  }, [onLogout]);\n  const handleDateChange = useCallback(date => {\n    setSelectedDate(date);\n  }, []);\n  const handleCreate = useCallback(values => {\n    const month = selectedDate.getMonth() + 1;\n    const date = ` ${selectedDate.getDate()}.${month}.${selectedDate.getFullYear()}`;\n    const sortTodo = {\n      id: null,\n      title: values.title + date\n    };\n\n    if (props.todos.find(todo => todo.title === sortTodo.title) === undefined) {\n      onCreateTodo(sortTodo);\n    }\n  }, [selectedDate, props.todos, onCreateTodo]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AppBar, {\n    position: \"static\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Toolbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    className: classes.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 21\n    }\n  }, props.username), /*#__PURE__*/React.createElement(Button, {\n    color: \"inherit\",\n    onClick: () => handleLogout(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 21\n    }\n  }, \"\\u0412\\u044B\\u0445\\u043E\\u0434\"))), /*#__PURE__*/React.createElement(FormCreateTask, {\n    onSubmit: handleCreate,\n    selectedDate: selectedDate,\n    todoList: props.todos,\n    handleDateChange: handleDateChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(CardTodo, {\n    todoList: props.todos,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }));\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(DisplayTodo);","map":{"version":3,"sources":["/home/julia/ToDoList/my-app/src/pages/todo-list/display-todo/index.tsx"],"names":["React","useCallback","useEffect","makeStyles","Typography","Button","AppBar","Toolbar","FormCreateTask","connect","onLogoutAction","createTodoAction","getTodoAction","reset","CardTodo","push","useStyles","theme","root","flexGrow","title","cardMedia","display","mapDispatchToProps","dispatch","onCreateTodo","sortTodo","onLogout","onGetTodos","mapStateToProps","state","todos","todoListData","username","user_data","DisplayTodo","props","classes","selectedDate","setSelectedDate","useState","Date","handleLogout","localStorage","removeItem","handleDateChange","date","handleCreate","values","month","getMonth","getDate","getFullYear","id","find","todo","undefined"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect } from 'react';\nimport { makeStyles, Typography, Button, AppBar, Toolbar } from '@material-ui/core';\nimport FormCreateTask from './components/formCreateTodo';\nimport { connect } from 'react-redux';\nimport {  onLogoutAction, createTodoAction, getTodoAction } from '../../../store/actions';\nimport { reset } from 'redux-form';\nimport { ITodoList } from '../../../interfaces/ITodoList';\nimport CardTodo from './components/cardList';\nimport { push } from 'connected-react-router';\n\n\ninterface IProps{\n    onCreateTodo : (sortTodo : ITodoList) => void;\n    onLogout : () => void;\n    onGetTodos: () => void;\n    todos: ITodoList[];\n    username: string;\n}\n\nconst useStyles = makeStyles((theme) => ({\n\n    root : {\n        flexGrow : 1,\n    },\n    title : {\n        flexGrow: 1,\n    },\n    cardMedia: {\n        display: 'block',\n    },\n}));\n\nconst mapDispatchToProps = (dispatch) => {\n    return({\n        onCreateTodo : (sortTodo : ITodoList) =>{\n            dispatch(createTodoAction(sortTodo))\n            dispatch(reset('create-todo'))\n        },\n        onLogout : () => { \n            dispatch(onLogoutAction()) \n        },\n        onGetTodos: () => {\n            dispatch(getTodoAction())\n        },\n    });\n}\n\nconst mapStateToProps = (state) => ({\n    todos : state.todoListData.todos,\n    username: state.user_data.username\n})\n\nexport const DisplayTodo : React.FC<IProps> = ({ onLogout, onGetTodos, onCreateTodo, ...props} : IProps) => {\n    const classes = useStyles();\n    const [selectedDate, setSelectedDate] = React.useState(new Date());\n\n    useEffect(() => {\n        onGetTodos()\n    }, [onGetTodos]);\n\n    const handleLogout = useCallback(() => {\n        localStorage.removeItem('token');\n        onLogout();\n        push('/');\n    },[onLogout]);\n\n    const handleDateChange = useCallback (date => {\n        setSelectedDate(date);\n    },[]);\n\n    const handleCreate =useCallback( values => {\n        \n        const month = selectedDate.getMonth() + 1;\n        const date : string =  ` ${selectedDate.getDate()}.${month}.${selectedDate.getFullYear()}`;\n\n        const sortTodo : ITodoList ={\n            id: null, \n            title : values.title + date \n        }; \n\n        if(props.todos.find((todo) => todo.title === sortTodo.title) === undefined){\n            onCreateTodo(sortTodo);\n        }\n    },[selectedDate, props.todos, onCreateTodo]);\n\n    return(\n        <div className = {classes.root}>\n            <AppBar position = \"static\">\n                <Toolbar>\n                    <Typography variant=\"h6\" className = {classes.title}>\n                       {props.username}\n                    </Typography>\n                    <Button color=\"inherit\" onClick = {() => handleLogout()}>\n                        Выход\n                    </Button>\n                </Toolbar>\n            </AppBar>\n            <FormCreateTask onSubmit={handleCreate} selectedDate = {selectedDate} todoList = {props.todos} handleDateChange = {handleDateChange}/>\n            <CardTodo todoList = {props.todos}/>\n        </div>\n    );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DisplayTodo);"]},"metadata":{},"sourceType":"module"}