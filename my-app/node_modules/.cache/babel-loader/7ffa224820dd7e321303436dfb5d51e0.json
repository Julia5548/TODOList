{"ast":null,"code":"import { call, put, race } from \"redux-saga/effects\";\nimport { fetchSendEmail, fetch_create_user, fetch_login_user, fetchResetPassword } from \"../../../services/services_user\";\nimport { CURRENT_USER, HIDE_ERROR } from \"../../actions/types\";\n\nfunction* wait(ms, result = true) {\n  return yield new Promise(resolve => setTimeout(resolve, ms));\n}\n\nfunction* show_error() {\n  const {\n    score,\n    timeout\n  } = yield race([call(wait, 5000), put({\n    type: HIDE_ERROR\n  })]);\n\n  if (!score) {\n    console.log(score);\n    yield put({\n      type: HIDE_ERROR\n    });\n  }\n}\n\nexport function* workerLoginUser(action) {\n  const user = action.user;\n  const {\n    history\n  } = action;\n  const login_user = {\n    username: user.username,\n    password: user.password\n  };\n\n  try {\n    const data = yield call(fetch_login_user, login_user);\n    localStorage.setItem('token', data.token);\n    const current_user = data.user;\n    yield put({\n      type: CURRENT_USER,\n      current_user\n    });\n    history.push('/todo/' + current_user.id);\n  } catch (error) {\n    console.log('ERROR_SAGA: ', error);\n    yield call(show_error);\n  }\n}\nexport function* workerCreateUser(action) {\n  const {\n    history\n  } = action;\n\n  try {\n    const data = yield call(fetch_create_user, action.user);\n\n    if (data.response === \"error\") {\n      yield call(show_error);\n    } else {\n      history.push('/');\n    }\n  } catch (error) {\n    console.log('ERROR_SAGA_SIGN_UP ', error);\n  }\n}\nexport function* workerResetPassword(action) {\n  const password = action.password;\n  const token = action.token;\n  const {\n    history\n  } = action;\n  yield call(fetchResetPassword, password, token, history);\n}\nexport function* workerSendEmail(action) {\n  const email = action.email;\n  const {\n    history\n  } = action;\n  yield call(fetchSendEmail, email, history);\n}","map":{"version":3,"sources":["/home/julia/ToDoList/my-app/src/store/saga/sagaUser/index.tsx"],"names":["call","put","race","fetchSendEmail","fetch_create_user","fetch_login_user","fetchResetPassword","CURRENT_USER","HIDE_ERROR","wait","ms","result","Promise","resolve","setTimeout","show_error","score","timeout","type","console","log","workerLoginUser","action","user","history","login_user","username","password","data","localStorage","setItem","token","current_user","push","id","error","workerCreateUser","response","workerResetPassword","workerSendEmail","email"],"mappings":"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","sourcesContent":["import { call, put, race, delay } from \"redux-saga/effects\" ;\nimport { fetchSendEmail, fetch_create_user, fetch_login_user, fetchResetPassword } from \"../../../services/services_user\";\nimport { CURRENT_USER, HIDE_ERROR, SHOW_ERROR } from \"../../actions/types\";\nimport { IUser } from \"../../../interfaces/IUser\";\n\n\nfunction* wait(ms, result=true) {\n    return yield new Promise(resolve => setTimeout(resolve, ms))\n  }\n\nfunction* show_error(){\n    const {score, timeout} = yield race([\n        call(wait,5000),\n        put({type : HIDE_ERROR})\n    ])\n    \n    if (!score) {\n        console.log(score)\n        yield put({type : HIDE_ERROR});\n    }\n}\n\nexport function* workerLoginUser(action) {\n    \n    const user : IUser = action.user;\n    const { history } = action;\n    const login_user = {\n        username : user.username,\n        password : user.password!\n    };\n    try{\n        const data  = yield call(fetch_login_user,login_user);\n        localStorage.setItem('token', data.token);\n        \n        const current_user = data.user;\n        yield put({type : CURRENT_USER, current_user});\n        \n        history.push('/todo/' + current_user.id);\n\n    }catch(error){\n        console.log('ERROR_SAGA: ', error);\n        yield call(show_error)\n    }\n}\n\nexport function* workerCreateUser(action){\n    \n    const { history } = action;\n    \n    try{\n        const data = yield call(fetch_create_user,action.user);\n        if (data.response === \"error\"){\n            yield call(show_error)\n        }else{\n            history.push('/');\n        }\n    }catch(error){\n        console.log('ERROR_SAGA_SIGN_UP ', error )\n    }\n}\n\nexport function* workerResetPassword(action){\n    const password : string = action.password;\n    const token = action.token\n    const { history }  = action;\n\n    yield call(fetchResetPassword, password, token, history);\n}\n\nexport function* workerSendEmail(action){\n    const email : string = action.email;\n    const { history }  = action;\n\n    yield call(fetchSendEmail, email, history);\n}"]},"metadata":{},"sourceType":"module"}