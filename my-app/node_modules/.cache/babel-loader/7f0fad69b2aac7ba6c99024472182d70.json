{"ast":null,"code":"import { getCookie } from './cookie';\nexport const fetchCreateTodo = sortTodo => {\n  const csrftoken = getCookie('csrftoken');\n  const url = 'http://127.0.0.1:8000/api/todo_create/';\n  fetch(url, {\n    mode: 'cors',\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json',\n      'X-CSRFToken': csrftoken,\n      Authorization: 'JWT ' + localStorage.getItem('token')\n    },\n    body: JSON.stringify(sortTodo)\n  }).catch(function (error) {\n    console.log('ERROR:', error);\n  });\n};\nexport const fetchRemoveTodo = sortTodo => {\n  const csrftoken = getCookie('csrftoken');\n  const url = 'http://127.0.0.1:8000/api/todo_delete/' + sortTodo.id + '/';\n  fetch(url, {\n    mode: 'cors',\n    method: 'DELETE',\n    headers: {\n      'Content-type': 'application/json',\n      'X-CSRFToken': csrftoken,\n      Authorization: 'JWT ' + localStorage.getItem('token')\n    }\n  }).then(response => {\n    console.log('deleted : ', response);\n  }).catch(function (error) {\n    console.log('ERROR:', error);\n  });\n};\nexport function fetchGetTodo(user_id) {\n  const csrftoken = getCookie('csrftoken');\n  const url = 'http://127.0.0.1:8000/api/todo_list/' + user_id;\n  fetch(url, {\n    mode: 'cors',\n    method: 'GET',\n    headers: {\n      Authorization: 'JWT ' + localStorage.getItem('token')\n    }\n  }).then(response => response.json()).then(data => {\n    const todo = {\n      id: data.id,\n      title: data.title,\n      user: data.user\n    };\n    return todo;\n  }).catch(function (error) {\n    console.log('ERROR:', error);\n  });\n}","map":{"version":3,"sources":["/home/julia/ToDoList/my-app/src/services/servicesTodo.tsx"],"names":["getCookie","fetchCreateTodo","sortTodo","csrftoken","url","fetch","mode","method","headers","Authorization","localStorage","getItem","body","JSON","stringify","catch","error","console","log","fetchRemoveTodo","id","then","response","fetchGetTodo","user_id","json","data","todo","title","user"],"mappings":"AAAA,SAASA,SAAT,QAA0B,UAA1B;AAIA,OAAO,MAAMC,eAAe,GAAIC,QAAD,IAAwB;AAEnD,QAAMC,SAAS,GAAGH,SAAS,CAAC,WAAD,CAA3B;AACA,QAAMI,GAAG,GAAG,wCAAZ;AAEAC,EAAAA,KAAK,CAACD,GAAD,EAAM;AACPE,IAAAA,IAAI,EAAG,MADA;AAEPC,IAAAA,MAAM,EAAE,MAFD;AAGPC,IAAAA,OAAO,EAAG;AACN,sBAAiB,kBADX;AAEN,qBAAgBL,SAFV;AAGNM,MAAAA,aAAa,EAAG,SAASC,YAAY,CAACC,OAAb,CAAqB,OAArB;AAHnB,KAHH;AAQPC,IAAAA,IAAI,EAAGC,IAAI,CAACC,SAAL,CAAeZ,QAAf;AARA,GAAN,CAAL,CASGa,KATH,CASS,UAASC,KAAT,EAAe;AACpBC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAuBF,KAAvB;AACH,GAXD;AAYH,CAjBM;AAmBP,OAAO,MAAMG,eAAe,GAAIjB,QAAD,IAA0B;AAErD,QAAMC,SAAS,GAAGH,SAAS,CAAC,WAAD,CAA3B;AACA,QAAMI,GAAG,GAAG,2CAA2CF,QAAQ,CAACkB,EAApD,GAAyD,GAArE;AAEAf,EAAAA,KAAK,CAACD,GAAD,EAAM;AACPE,IAAAA,IAAI,EAAG,MADA;AAEPC,IAAAA,MAAM,EAAE,QAFD;AAGPC,IAAAA,OAAO,EAAG;AACN,sBAAiB,kBADX;AAEN,qBAAgBL,SAFV;AAGNM,MAAAA,aAAa,EAAG,SAASC,YAAY,CAACC,OAAb,CAAqB,OAArB;AAHnB;AAHH,GAAN,CAAL,CAQGU,IARH,CAQSC,QAAD,IAAc;AAClBL,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BI,QAA1B;AACH,GAVD,EAUGP,KAVH,CAUS,UAASC,KAAT,EAAe;AACpBC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAuBF,KAAvB;AACH,GAZD;AAaH,CAlBM;AAoBP,OAAQ,SAASO,YAAT,CAAsBC,OAAtB,EAAuC;AAE3C,QAAMrB,SAAS,GAAGH,SAAS,CAAC,WAAD,CAA3B;AACA,QAAMI,GAAG,GAAG,yCAAyCoB,OAArD;AAEAnB,EAAAA,KAAK,CAACD,GAAD,EAAM;AACPE,IAAAA,IAAI,EAAG,MADA;AAEPC,IAAAA,MAAM,EAAE,KAFD;AAGPC,IAAAA,OAAO,EAAG;AACNC,MAAAA,aAAa,EAAG,SAASC,YAAY,CAACC,OAAb,CAAqB,OAArB;AADnB;AAHH,GAAN,CAAL,CAMIU,IANJ,CAMSC,QAAQ,IACbA,QAAQ,CAACG,IAAT,EAPJ,EAQEJ,IARF,CAQOK,IAAI,IAAI;AACX,UAAMC,IAAgB,GAAG;AACrBP,MAAAA,EAAE,EAAGM,IAAI,CAACN,EADW;AAErBQ,MAAAA,KAAK,EAAGF,IAAI,CAACE,KAFQ;AAGrBC,MAAAA,IAAI,EAAGH,IAAI,CAACG;AAHS,KAAzB;AAKA,WAAOF,IAAP;AACH,GAfD,EAeGZ,KAfH,CAeS,UAASC,KAAT,EAAe;AACpBC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAuBF,KAAvB;AACH,GAjBD;AAkBH","sourcesContent":["import { getCookie } from './cookie';\nimport { ITodoList } from '../interfaces/ITodoList';\n\n\nexport const fetchCreateTodo = (sortTodo: ITodoList) =>{\n    \n    const csrftoken = getCookie('csrftoken');\n    const url = 'http://127.0.0.1:8000/api/todo_create/';\n\n    fetch(url, {\n        mode : 'cors',\n        method: 'POST',\n        headers : {\n            'Content-type' : 'application/json',\n            'X-CSRFToken' : csrftoken!,\n            Authorization : 'JWT ' + localStorage.getItem('token')\n        },\n        body : JSON.stringify(sortTodo)\n    }).catch(function(error){\n        console.log('ERROR:' , error);\n    });\n}\n\nexport const fetchRemoveTodo = (sortTodo : ITodoList) => {\n    \n    const csrftoken = getCookie('csrftoken');\n    const url = 'http://127.0.0.1:8000/api/todo_delete/' + sortTodo.id + '/';\n    \n    fetch(url, {\n        mode : 'cors',\n        method: 'DELETE',\n        headers : {\n            'Content-type' : 'application/json',\n            'X-CSRFToken' : csrftoken!,\n            Authorization : 'JWT ' + localStorage.getItem('token')\n        },\n    }).then((response) => {\n        console.log('deleted : ', response);\n    }).catch(function(error){\n        console.log('ERROR:' , error);\n    });\n}\n\nexport  function fetchGetTodo(user_id : number){\n    \n    const csrftoken = getCookie('csrftoken');\n    const url = 'http://127.0.0.1:8000/api/todo_list/' + user_id;\n    \n    fetch(url, {\n        mode : 'cors',\n        method: 'GET',\n        headers : {\n            Authorization : 'JWT ' + localStorage.getItem('token')\n        },\n    }) .then(response => \n        response.json()\n    ).then(data => {\n        const todo : ITodoList = {\n            id : data.id, \n            title : data.title,\n            user : data.user\n        };\n        return todo;\n    }).catch(function(error){\n        console.log('ERROR:' , error);\n    });\n}\n"]},"metadata":{},"sourceType":"module"}