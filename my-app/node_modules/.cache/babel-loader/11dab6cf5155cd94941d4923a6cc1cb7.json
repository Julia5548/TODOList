{"ast":null,"code":"import { getCookie } from \"./cookie\";\nconst csrftoken = getCookie('csrftoken');\n\nconst dataFetch = (url, data) => {\n  return new Request(url, {\n    mode: 'cors',\n    headers: {\n      'Content-type': 'application/json',\n      'X-CSRFToken': csrftoken\n    },\n    method: 'POST',\n    body: JSON.stringify(data)\n  });\n};\n\nexport async function fetchLoginUser(login_user) {\n  // console.log(dataFetch)\n  const response = fetch(dataFetch('http://127.0.0.1:8000/api/v1/token/auth/', login_user));\n  const data = response.then(response => response.json()).catch(error => {\n    console.log('ERROR_FETCH: ', error);\n  });\n  return await data;\n}\n\nconst request = (url, data, token, jsonRequest = true) => {\n  console.log(jsonRequest);\n  return fetchLoginUser('');\n};\n\nexport const signIp = request('', {});","map":{"version":3,"sources":["/home/julia/ToDoList/my-app/src/services/servicesProp.tsx"],"names":["getCookie","csrftoken","dataFetch","url","data","Request","mode","headers","method","body","JSON","stringify","fetchLoginUser","login_user","response","fetch","then","json","catch","error","console","log","request","token","jsonRequest","signIp"],"mappings":"AAAA,SAASA,SAAT,QAA0B,UAA1B;AAIA,MAAMC,SAAS,GAAGD,SAAS,CAAC,WAAD,CAA3B;;AAEA,MAAME,SAAS,GAAG,CAACC,GAAD,EAAeC,IAAf,KAAwB;AACtC,SACI,IAAIC,OAAJ,CAAYF,GAAZ,EAAgB;AACZG,IAAAA,IAAI,EAAG,MADK;AAERC,IAAAA,OAAO,EAAE;AACL,sBAAiB,kBADZ;AAEL,qBAAgBN;AAFX,KAFD;AAMZO,IAAAA,MAAM,EAAG,MANG;AAOZC,IAAAA,IAAI,EAAGC,IAAI,CAACC,SAAL,CAAeP,IAAf;AAPK,GAAhB,CADJ;AAWH,CAZD;;AAcA,OAAO,eAAeQ,cAAf,CAA8BC,UAA9B,EAAyC;AAE5C;AACA,QAAMC,QAAQ,GAAGC,KAAK,CAACb,SAAS,CAAC,0CAAD,EAA6CW,UAA7C,CAAV,CAAtB;AAEA,QAAMT,IAAI,GAAGU,QAAQ,CAACE,IAAT,CAAcF,QAAQ,IAC/BA,QAAQ,CAACG,IAAT,EADS,EAEXC,KAFW,CAELC,KAAK,IAAI;AACbC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,KAA7B;AACH,GAJY,CAAb;AAMA,SAAO,MAAMf,IAAb;AACH;;AAsBD,MAAMkB,OAAO,GAAG,CACZnB,GADY,EAEZC,IAFY,EAGZmB,KAHY,EAIZC,WAAqB,GAAG,IAJZ,KAKgB;AAE5BJ,EAAAA,OAAO,CAACC,GAAR,CAAYG,WAAZ;AACA,SAAOZ,cAAc,CAAC,EAAD,CAArB;AACH,CATD;;AAcA,OAAO,MAAMa,MAAM,GAAGH,OAAO,CACzB,EADyB,EACrB,EADqB,CAAtB","sourcesContent":["import { getCookie } from \"./cookie\";\nimport { IUser } from \"../interfaces/IUser\";\n\n\nconst csrftoken = getCookie('csrftoken');\n\nconst dataFetch = (url : string, data) => {\n    return (\n        new Request(url,{\n            mode : 'cors',\n                headers: {\n                    'Content-type' : 'application/json',\n                    'X-CSRFToken' : csrftoken!,\n                },\n            method : 'POST',\n            body : JSON.stringify(data)\n        })\n    );\n}\n\nexport async function fetchLoginUser(login_user){\n\n    // console.log(dataFetch)\n    const response = fetch(dataFetch('http://127.0.0.1:8000/api/v1/token/auth/', login_user))\n\n    const data = response.then(response =>\n        response.json()\n    ).catch(error => {\n        console.log('ERROR_FETCH: ', error);\n    });\n\n    return await data;\n}\n\ninterface RequestData<Payload, Query>{}\n\ninterface ResponseBody<Response> {\n    data?: Response;\n    status: number;\n    statusText: string;\n    headers: Headers;\n    code?: number;\n}\n  \ninterface ResponseData<Response>{ \n    response?: ResponseBody<Response>;\n    error?: any;\n}\n\nexport type Empty = {}\ntype Query = Record<string, any>;\ntype Payload = Record<string, any>;\ntype Response = Record<string, any>;\n\nconst request = <T extends Payload, R extends Response, Q extends Query>(\n    url : string,\n    data: RequestData<T, Q>,\n    token? : string,\n    jsonRequest : boolean = true\n) : Promise<ResponseData<R>> => {\n\n    console.log(jsonRequest);\n    return fetchLoginUser('')\n}\n\ninterface TokenResponse{\n    token : string;\n}\nexport const signIp = request<IUser, TokenResponse, Empty>(\n    '', {},\n);"]},"metadata":{},"sourceType":"module"}