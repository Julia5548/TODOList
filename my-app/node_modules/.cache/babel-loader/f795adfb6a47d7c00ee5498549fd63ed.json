{"ast":null,"code":"import { getCookie } from \"./cookie\";\nexport const fetch_create_user = user => {\n  const create_user = {\n    username: user.username,\n    password: user.password,\n    email: user.email\n  };\n  console.log('CREATE_USER: ', create_user);\n  const csrftoken = getCookie('csrftoken');\n  const body = {\n    'user': {\n      'username': create_user.username,\n      'email': create_user.email,\n      'password': create_user.password\n    }\n  };\n  fetch('http://127.0.0.1:8000/api_users/users/create', {\n    mode: 'cors',\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json',\n      'X-CSRFToken': csrftoken\n    },\n    body: JSON.stringify(body)\n  }).then(response => {\n    response.json();\n    console.log('CREATE_RESULT : ', response);\n  }).catch(error => console.log('ERROR_FETCH: ', error));\n};\nexport async function fetch_login_user(login_user) {\n  console.log(login_user);\n  const csrftoken = getCookie('csrftoken');\n  const response = fetch('http://127.0.0.1:8000/token-auth/', {\n    mode: 'cors',\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json',\n      'X-CSRFToken': csrftoken\n    },\n    body: JSON.stringify(login_user)\n  });\n  const data = response.then(response => response.json()).catch(error => {\n    console.log('ERROR_FETCH: ', error);\n  });\n  return await data;\n}\nexport const fetch_reset_password = (email, history) => {\n  console.log('RESET_PASSWORD: ', email);\n  const body = {\n    email: email\n  };\n  const csrftoken = getCookie('csrftoken');\n  fetch('http://127.0.0.1:8000/api/password_reset/', {\n    mode: 'cors',\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json',\n      'X-CSRFToken': csrftoken\n    },\n    body: JSON.stringify(body)\n  }).then(response => {\n    response.json();\n    history.push('/');\n    console.log('SEND_EMAIL : ', response);\n  }).catch(error => console.log('ERROR_FETCH: ', error));\n};","map":{"version":3,"sources":["/home/julia/ToDoList/my-app/src/services/services_user.tsx"],"names":["getCookie","fetch_create_user","user","create_user","username","password","email","console","log","csrftoken","body","fetch","mode","method","headers","JSON","stringify","then","response","json","catch","error","fetch_login_user","login_user","data","fetch_reset_password","history","push"],"mappings":"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","sourcesContent":["import { IUser } from \"../interface\";\nimport { getCookie } from \"./cookie\";\n\n\nexport const fetch_create_user = (user : IUser) => {\n\n    const create_user = {\n        username : user.username,\n        password : user.password!,\n        email : user.email!\n    };\n\n    console.log('CREATE_USER: ', create_user);\n\n    const csrftoken = getCookie('csrftoken');\n    const body = {'user' : {\n        'username' : create_user.username,\n        'email' : create_user.email,\n        'password' : create_user.password\n        }\n    };\n\n    fetch('http://127.0.0.1:8000/api_users/users/create', {\n        mode : 'cors',\n        method : 'POST',\n        headers: {\n            'Content-type' : 'application/json',\n            'X-CSRFToken' : csrftoken!,\n        },\n        body : JSON.stringify(body)\n\n    }).then(response => {\n        \n        response.json();\n        console.log('CREATE_RESULT : ', response);\n\n    }).catch(error => \n        console.log('ERROR_FETCH: ', error)\n    );\n\n}\n\nexport async function fetch_login_user(login_user){\n\n    console.log(login_user)\n    const csrftoken = getCookie('csrftoken');\n    const response = fetch('http://127.0.0.1:8000/token-auth/', \n    {\n        mode : 'cors',\n        method : 'POST',\n        headers: {\n            'Content-type' : 'application/json',\n            'X-CSRFToken' : csrftoken!,\n        },\n        body : JSON.stringify(login_user)\n    });\n\n    const data = response.then(response => \n        response.json()\n    ).catch(error => {\n        console.log('ERROR_FETCH: ', error);\n    }\n    );\n\n    return await data;\n}\n\nexport const fetch_reset_password = (email : string, history) => {\n\n    console.log('RESET_PASSWORD: ', email);\n\n    const body = {\n        email : email\n    };\n\n    const csrftoken = getCookie('csrftoken');\n\n    fetch('http://127.0.0.1:8000/api/password_reset/', \n    {\n        mode : 'cors',\n        method : 'POST',\n        headers: {\n            'Content-type' : 'application/json',\n            'X-CSRFToken' : csrftoken!,\n        },\n        body : JSON.stringify(body)\n\n    }).then(response => {\n\n        response.json();\n        history.push('/');\n        console.log('SEND_EMAIL : ', response);\n    \n    }).catch(error => \n        console.log('ERROR_FETCH: ', error)    \n    );\n}"]},"metadata":{},"sourceType":"module"}