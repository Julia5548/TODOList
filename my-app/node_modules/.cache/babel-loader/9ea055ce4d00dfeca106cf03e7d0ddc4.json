{"ast":null,"code":"var _jsxFileName = \"/home/julia/ToDoList/my-app/src/pages/todo-list/display-todo/index.tsx\";\nimport React, { useEffect, useState } from 'react';\nimport { makeStyles, Typography, Button, AppBar, Toolbar } from '@material-ui/core';\nimport FormCreateTask from './components/formCreateTodo';\nimport { connect } from 'react-redux';\nimport { onLogoutAction, addTodoAction } from '../../../store/actions';\nimport { reset } from 'redux-form';\nimport CardTodo from './components/cardList';\nimport { withRouter } from 'react-router-dom';\nimport { fetchGetTodo } from '../../../services/servicesTodo';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  title: {\n    flexGrow: 1\n  },\n  cardMedia: {\n    display: 'block'\n  }\n}));\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onCreateTodo: sortTodo => {\n      dispatch(addTodoAction(sortTodo));\n      dispatch(reset('create-todo'));\n    },\n    onLogout: () => {\n      dispatch(onLogoutAction());\n    }\n  };\n};\n\nconst mapStateToProps = state => ({});\n\nexport const DisplayTodo = ({\n  onLogout,\n  onCreateTodo,\n  history,\n  ...props\n}) => {\n  const classes = useStyles();\n  const [todoList, setTodoList] = useState([]);\n  const pk = props.match.params;\n  useEffect(() => {\n    try {\n      fetchGetTodo(pk).then(todo => setTodoList(todo));\n    } catch (error) {\n      console.log('ERROR: ', error);\n    }\n  }, [pk]);\n\n  const handleLogout = () => {\n    localStorage.removeItem('token');\n    onLogout();\n    history.push('/');\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AppBar, {\n    position: \"static\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Toolbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    className: classes.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 21\n    }\n  }, \"username\"), /*#__PURE__*/React.createElement(Button, {\n    color: \"inherit\",\n    onClick: () => handleLogout(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 21\n    }\n  }, \"\\u0412\\u044B\\u0445\\u043E\\u0434\"))), /*#__PURE__*/React.createElement(FormCreateTask, {\n    onCreateTodo: onCreateTodo,\n    todoList: todoList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(CardTodo, {\n    todoList: todoList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }));\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(DisplayTodo));","map":{"version":3,"sources":["/home/julia/ToDoList/my-app/src/pages/todo-list/display-todo/index.tsx"],"names":["React","useEffect","useState","makeStyles","Typography","Button","AppBar","Toolbar","FormCreateTask","connect","onLogoutAction","addTodoAction","reset","CardTodo","withRouter","fetchGetTodo","useStyles","theme","root","flexGrow","title","cardMedia","display","mapDispatchToProps","dispatch","onCreateTodo","sortTodo","onLogout","mapStateToProps","state","DisplayTodo","history","props","classes","todoList","setTodoList","pk","match","params","then","todo","error","console","log","handleLogout","localStorage","removeItem","push"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { makeStyles, Typography, Button, AppBar, Toolbar } from '@material-ui/core';\nimport FormCreateTask from './components/formCreateTodo';\nimport { connect } from 'react-redux';\nimport {  onLogoutAction, addTodoAction } from '../../../store/actions';\nimport { reset } from 'redux-form';\nimport { ITodoList } from '../../../interfaces/ITodoList';\nimport CardTodo from './components/cardList';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { fetchGetTodo } from '../../../services/servicesTodo';\n\n\ninterface IProps extends RouteComponentProps<{pk : string}>{\n    onCreateTodo(sortTodo : ITodoList) : void;\n    onLogout(): void;\n}\n\nconst useStyles = makeStyles((theme) => ({\n\n    root : {\n        flexGrow : 1,\n    },\n    title : {\n        flexGrow: 1,\n    },\n    cardMedia: {\n        display: 'block',\n    },\n}));\n\nconst mapDispatchToProps = (dispatch) => {\n    return({\n        onCreateTodo : (sortTodo : ITodoList) =>{\n            dispatch(addTodoAction(sortTodo))\n            dispatch(reset('create-todo'))\n        },\n        onLogout : () => { \n            dispatch(onLogoutAction()) \n        }\n    });\n}\n\nconst mapStateToProps = (state) => ({\n    \n})\n\nexport const DisplayTodo : React.FC<IProps> = ({ onLogout, onCreateTodo, history, ...props} : IProps) => {\n    const classes = useStyles();\n    const [todoList, setTodoList] = useState<ITodoList[]>([]);\n    const pk : any = props.match.params;\n\n    useEffect(() => {\n            try{\n               fetchGetTodo(pk).then((todo) => setTodoList(todo));\n            }catch(error){\n                console.log('ERROR: ', error);\n            }\n    }, [pk])\n\n    const handleLogout = () => {\n        localStorage.removeItem('token');\n        onLogout();\n        history.push('/');\n    };\n\n    return(\n        <div className = {classes.root}>\n            <AppBar position = \"static\">\n                <Toolbar>\n                    <Typography variant=\"h6\" className = {classes.title}>\n                        username\n                    </Typography>\n                    <Button color=\"inherit\" onClick = {() => handleLogout()}>\n                        Выход\n                    </Button>\n                </Toolbar>\n            </AppBar>\n            <FormCreateTask onCreateTodo = {onCreateTodo} todoList = {todoList}/>\n            <CardTodo todoList = {todoList}/>\n        </div>\n    );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(DisplayTodo));"]},"metadata":{},"sourceType":"module"}