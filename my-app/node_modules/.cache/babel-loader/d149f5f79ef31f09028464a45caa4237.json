{"ast":null,"code":"var _jsxFileName = \"/home/julia/ToDoList/my-app/src/pages/todo-list/display-todo/components/cardList.tsx\";\nimport React, { useCallback, useState } from 'react';\nimport { makeStyles, Grid, CardHeader, Card, CardActions, IconButton } from '@material-ui/core';\nimport { Add, Close } from '@material-ui/icons';\nimport DeleteTodo from '../../delete-todo';\nimport ListTasks from './listTask';\nimport FormCreateTask from '../../create-task';\nimport { createTaskAction } from '../../../../store/actions';\nimport { reset } from 'redux-form';\nimport { connect } from 'react-redux';\nconst useStyles = makeStyles(theme => ({\n  cardMedia: {\n    display: 'block'\n  },\n  cardGrid: {\n    marginLeft: theme.spacing(3),\n    width: '90%'\n  }\n}));\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAddTask: newTask => {\n      dispatch(createTaskAction(newTask));\n      dispatch(reset('create-task'));\n    }\n  };\n};\n\nconst CardTodo = ({\n  todoList,\n  onAddTask\n}) => {\n  const classes = useStyles();\n  const [idTodo, setId] = useState(0);\n  const [isCreateTask, setIsCreateTask] = useState(true);\n  const handleCreateTask = useCallback(event => {\n    setIsCreateTask(true);\n    const id = event.currentTarget.value.toString();\n    setId(id);\n  }, [setIsCreateTask]);\n  const handleCLoseForm = useCallback(() => {\n    setIsCreateTask(false);\n  }, [setIsCreateTask]);\n  const handleCreate = useCallback(values => {\n    const newTask = {\n      id_todo: idTodo,\n      title: values.title,\n      is_completed: false\n    };\n    onAddTask(newTask);\n  }, [onAddTask, idTodo]);\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"flex-start\",\n    alignItems: \"flex-start\",\n    spacing: 1,\n    className: classes.cardGrid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, todoList.map(todo => {\n    console.log(todo.id === idTodo);\n    console.log(todo.id, idTodo);\n    return /*#__PURE__*/React.createElement(Grid, {\n      key: todo.id,\n      item: true,\n      xs: 6,\n      md: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(CardHeader, {\n      action: isCreateTask && todo.id === idTodo ? /*#__PURE__*/React.createElement(IconButton, {\n        \"aria-label\": \"close\",\n        color: \"primary\",\n        onClick: handleCLoseForm,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Close, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 41\n        }\n      })) : /*#__PURE__*/React.createElement(IconButton, {\n        \"aria-label\": \"add\",\n        color: \"primary\",\n        onClick: handleCreateTask,\n        value: todo.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Add, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 41\n        }\n      })),\n      title: todo.title,\n      subheader: \"\\u0412\\u0430\\u0448\\u0438 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0438: \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(CardActions, {\n      className: classes.cardMedia,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 25\n      }\n    }, isCreateTask && todo.id === idTodo ? /*#__PURE__*/React.createElement(FormCreateTask, {\n      onSubmit: handleCreate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 33\n      }\n    }) : null, /*#__PURE__*/React.createElement(ListTasks, {\n      idTodo: todo.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(DeleteTodo, {\n      todo: todo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 29\n      }\n    }))));\n  }));\n};\n\nexport default connect(null, mapDispatchToProps)(CardTodo);","map":{"version":3,"sources":["/home/julia/ToDoList/my-app/src/pages/todo-list/display-todo/components/cardList.tsx"],"names":["React","useCallback","useState","makeStyles","Grid","CardHeader","Card","CardActions","IconButton","Add","Close","DeleteTodo","ListTasks","FormCreateTask","createTaskAction","reset","connect","useStyles","theme","cardMedia","display","cardGrid","marginLeft","spacing","width","mapDispatchToProps","dispatch","onAddTask","newTask","CardTodo","todoList","classes","idTodo","setId","isCreateTask","setIsCreateTask","handleCreateTask","event","id","currentTarget","value","toString","handleCLoseForm","handleCreate","values","id_todo","title","is_completed","map","todo","console","log"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from 'react';\nimport { ITodoList } from '../../../../interfaces/ITodoList';\nimport { makeStyles, Grid, CardHeader, Card, CardActions, IconButton } from '@material-ui/core';\nimport { Add, Close } from '@material-ui/icons';\nimport DeleteTodo from '../../delete-todo';\nimport ListTasks from './listTask';\nimport FormCreateTask from '../../create-task';\nimport { ITask } from '../../../../interfaces/ITask';\nimport { createTaskAction } from '../../../../store/actions';\nimport { reset } from 'redux-form';\nimport { connect } from 'react-redux';\n\n\ninterface IProps{\n    todoList : ITodoList[];\n    onAddTask : (newTask : ITask) => void;\n}\n\nconst useStyles = makeStyles((theme) => ({\n    cardMedia: {\n        display: 'block',\n    },\n    cardGrid: {\n        marginLeft : theme.spacing(3),\n        width : '90%'\n    },\n}));\n\nconst mapDispatchToProps = (dispatch) => {\n    return({\n        onAddTask : (newTask : ITask) => {\n            dispatch(createTaskAction(newTask))\n            dispatch(reset('create-task'))\n        },\n\n    });\n}\n\nconst CardTodo : React.FC<IProps> = ({todoList, onAddTask}: IProps) => {\n    const classes = useStyles();\n    const [idTodo, setId] = useState<number>(0); \n\n    const[isCreateTask, setIsCreateTask] = useState(true);\n\n    const handleCreateTask = useCallback( (event) =>{\n        setIsCreateTask(true);\n        const id : number = event.currentTarget.value.toString()\n        setId(id);\n        \n    }, [setIsCreateTask]);\n\n    const handleCLoseForm = useCallback(() => {\n        setIsCreateTask(false);\n        \n    }, [setIsCreateTask]);\n\n    const handleCreate = useCallback(values => {\n        const newTask : ITask = {\n            id_todo : idTodo!,\n            title: values.title,\n            is_completed : false\n        };\n\n        onAddTask(newTask);\n    }, [onAddTask, idTodo]);\n\n    return(\n        <Grid container\n            direction = 'row'\n            justify = 'flex-start'\n            alignItems = 'flex-start' \n            spacing = {1}\n            className = {classes.cardGrid}\n        >  \n            {todoList.map((todo) =>{ \n                console.log(todo.id === idTodo)\n                console.log(todo.id, idTodo)\n                return(\n                <Grid key = {todo.id} item xs={6} md={3}>\n                    <Card>\n                        <CardHeader\n                            action= {\n                                isCreateTask && (todo.id === idTodo) ?    \n                                    <IconButton  aria-label=\"close\" color=\"primary\" onClick = {handleCLoseForm}>\n                                        <Close/>\n                                    </IconButton>\n                                    :  \n                                    <IconButton  aria-label=\"add\" color=\"primary\" onClick = {handleCreateTask} value = {todo.id!} >\n                                        <Add/>\n                                    </IconButton>   \n                            }\n                            title = {todo.title}\n                            subheader = \"Ваши задачи: \"\n                        />\n                        <CardActions className={classes.cardMedia}>\n                            {isCreateTask && (todo.id===idTodo) ?\n                                <FormCreateTask onSubmit = {handleCreate} />\n                                : null\n                            }\n                            <ListTasks idTodo = {todo.id!}/>\n                            <DeleteTodo todo = {todo}/>\n                        </CardActions>\n                    </Card>\n                </Grid>\n                )\n            })}\n        </Grid>\n    );\n}\n\nexport default connect(null, mapDispatchToProps)(CardTodo);\n"]},"metadata":{},"sourceType":"module"}