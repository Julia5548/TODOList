{"ast":null,"code":"var _jsxFileName = \"/home/julia/ToDoList/my-app/src/ pages/User.tsx\";\nimport React, { useEffect } from 'react';\nimport { connect, useSelector } from 'react-redux';\nimport Route from '../routes';\nimport { reset } from 'redux-form';\nimport { addTaskAction, toggleTaskAction, removeTaskAction, onLogoutAction, onCurrentUserAction } from '../store/actions';\nimport { onLoginUserAction, onCreateUserAction, onResetPasswordAction, onGetTokenAction, onGetUserAction } from '../store/actions';\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAddTask: newTask => {\n      dispatch(addTaskAction(newTask));\n      dispatch(reset('createTask'));\n    },\n    onToggle: task => {\n      dispatch(toggleTaskAction(task));\n    },\n    onRemove: task => {\n      dispatch(removeTaskAction(task));\n    },\n    onLoginUser: (user, history) => {\n      dispatch(onLoginUserAction(user, history));\n    },\n    onCreateUser: (user, history) => {\n      dispatch(onCreateUserAction(user, history));\n    },\n    onResetPassword: (email, history) => {\n      dispatch(onResetPasswordAction(email, history));\n    },\n    onGetToken: () => {\n      dispatch(onGetTokenAction());\n    },\n    onLogout: () => {\n      dispatch(onLogoutAction());\n    },\n    onCurrentUser: current_user => {\n      dispatch(onCurrentUserAction(current_user));\n    },\n    onGetUser: () => {\n      dispatch(onGetUserAction());\n    }\n  };\n};\n\nconst mapStateToProps = state => ({\n  username: state.user_data.username\n});\n\nconst User = props => {\n  if (localStorage.getItem('token')) {\n    props.onGetToken();\n  }\n\n  const current_state_user = useSelector(state => state.user_data.logged_in);\n  useEffect(() => {\n    if (current_state_user) {\n      try {\n        fetch('http://127.0.0.1:8000/api_users/current_user/', {\n          mode: 'cors',\n          method: 'GET',\n          headers: {\n            Authorization: 'JWT ' + localStorage.getItem('token')\n          }\n        }).then(response => response.json()).then(data => {\n          const current_user = {\n            id: data.id,\n            username: data.username,\n            logged_in: true\n          };\n\n          if (current_user.id !== undefined) {\n            props.onCurrentUser(current_user);\n            const url = 'todo/' + current_user.id;\n          } else {\n            props.onLogout();\n          }\n        });\n      } catch (error) {\n        console.log('ERROR: ', error);\n      }\n    }\n  }, [current_state_user]);\n  console.log('PROPS User ', props);\n  return /*#__PURE__*/React.createElement(Route, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(User);","map":{"version":3,"sources":["/home/julia/ToDoList/my-app/src/ pages/User.tsx"],"names":["React","useEffect","connect","useSelector","Route","reset","addTaskAction","toggleTaskAction","removeTaskAction","onLogoutAction","onCurrentUserAction","onLoginUserAction","onCreateUserAction","onResetPasswordAction","onGetTokenAction","onGetUserAction","mapDispatchToProps","dispatch","onAddTask","newTask","onToggle","task","onRemove","onLoginUser","user","history","onCreateUser","onResetPassword","email","onGetToken","onLogout","onCurrentUser","current_user","onGetUser","mapStateToProps","state","username","user_data","User","props","localStorage","getItem","current_state_user","logged_in","fetch","mode","method","headers","Authorization","then","response","json","data","id","undefined","url","error","console","log"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { connect, useSelector } from 'react-redux';\nimport Route from '../routes'\nimport { ITodo, IUser } from '../interface';\nimport { reset } from 'redux-form';\nimport { RootState } from '../store/reducers';\nimport { addTaskAction, toggleTaskAction, removeTaskAction, onLogoutAction, onCurrentUserAction } from '../store/actions';\nimport { onLoginUserAction, onCreateUserAction, onResetPasswordAction, onGetTokenAction , onGetUserAction} from '../store/actions';\n\n\nconst mapDispatchToProps = (dispatch) => {\n    return({\n        onAddTask : (newTask : ITodo) => {\n            dispatch(addTaskAction(newTask))\n            dispatch(reset('createTask'))\n        },\n        onToggle : (task : ITodo) => {\n            dispatch(toggleTaskAction(task))\n        },\n        onRemove : (task : ITodo) => {\n            dispatch(removeTaskAction(task))\n        }, \n        onLoginUser : (user : IUser, history) => {\n            dispatch(onLoginUserAction(user, history))\n        },\n        onCreateUser : (user : IUser, history) => {\n            dispatch(onCreateUserAction(user, history))\n        },\n        onResetPassword : (email: string, history) => {\n            dispatch(onResetPasswordAction(email, history))\n        },\n        onGetToken : () => { \n            dispatch(onGetTokenAction()) \n        },\n        onLogout : () => { \n            dispatch(onLogoutAction()) \n        },\n        onCurrentUser : (current_user: IUser) => { \n            dispatch(onCurrentUserAction(current_user))\n        },\n        onGetUser : () => {\n            dispatch(onGetUserAction())\n        }\n    })\n}\n\nconst mapStateToProps = (state) => ({\n    username : state.user_data.username\n})\n\nconst User = (props : any) => {\n\n    if (localStorage.getItem('token')){\n        props.onGetToken();\n    }\n\n    const current_state_user = useSelector((state : RootState) => state.user_data.logged_in);\n\n    useEffect(() => {\n        if(current_state_user){\n            try{\n                fetch('http://127.0.0.1:8000/api_users/current_user/',\n                    {\n                        mode: 'cors',\n                        method : 'GET',\n                        headers: {\n                            Authorization : 'JWT ' + localStorage.getItem('token')\n                        }\n                    }\n                )\n                .then(response => \n                    response.json()\n                )\n                .then(data => {\n                    const current_user : IUser = {\n                        id : data.id, \n                        username : data.username, \n                        logged_in : true\n                    };\n                    if(current_user.id !== undefined){\n                        props.onCurrentUser(current_user);\n                        const url : string= 'todo/'+ current_user.id;\n                    }else{\n                        props.onLogout();\n                    }\n                })\n            }catch(error){\n                console.log('ERROR: ', error)\n            }\n        }\n    }, [current_state_user])\n\n\n    console.log('PROPS User ', props)\n    return (\n        <Route {...props}/>\n    );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(User);"]},"metadata":{},"sourceType":"module"}