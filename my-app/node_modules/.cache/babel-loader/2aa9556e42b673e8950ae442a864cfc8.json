{"ast":null,"code":"var _jsxFileName = \"/home/julia/ToDoList/my-app/src/pages/todo-list/display-task/components/listTask.tsx\";\nimport React, { useState } from 'react';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { makeStyles, Typography, Card, CardContent, IconButton, Checkbox } from '@material-ui/core';\nimport FormDialog from '../../../../components/FormDialog';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { show } from 'redux-modal';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    paddingRight: theme.spacing(3),\n    margin: theme.spacing(1)\n  },\n  notCheck: {\n    flex: '1 0 auto'\n  },\n  check: {\n    flex: '1 0 auto',\n    textDecoration: 'line-through',\n    color: 'rgba(0, 0, 0, 0.12)',\n    boxShadow: 'none'\n  }\n}));\nexport const ListTask = ({\n  idTodo,\n  ...props\n}) => {\n  const classes = useStyles();\n  let removeTask;\n  const taskList = [{\n    id: 7,\n    idTodo: 1,\n    title: 'покормить кота',\n    isCompleted: false\n  }, {\n    id: 5,\n    idTodo: 1,\n    title: 'покормить себя',\n    isCompleted: false\n  }, {\n    id: 6,\n    idTodo: 1,\n    title: 'покормить брата',\n    isCompleted: false\n  }];\n  const [open, setOpen] = useState(true);\n\n  const handleClose = () => {\n    setOpen(false);\n  }; // const handleOpen = name => () => {\n  //     props.show(name, { message: `This is a ${name} modal` })\n  //   };\n\n\n  const handleRemoveTask = task => {\n    // onRemove(task)\n    console.log('Задача удалена : ', task);\n    setOpen(false);\n  };\n\n  const handleOpen = task => {\n    setOpen(true);\n    removeTask = task;\n    console.log(task);\n    const reducer = show.name;\n    console.log(reducer);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, taskList.map(todo => {\n    let classCheked = classes.notCheck;\n\n    if (todo.isCompleted) {\n      classCheked = classes.check;\n    }\n\n    if (todo.idTodo === idTodo) {\n      return /*#__PURE__*/React.createElement(Card, {\n        key: todo.id,\n        className: classes.root,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Checkbox, {\n        checked: todo.isCompleted,\n        name: \"checkBox_toggle_task\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(CardContent, {\n        className: classCheked,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Typography, {\n        variant: \"h6\",\n        component: \"h6\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 33\n        }\n      }, todo.title)), /*#__PURE__*/React.createElement(IconButton, {\n        \"aria-label\": \"delete\",\n        color: \"secondary\",\n        edge: \"end\",\n        onClick: () => handleOpen(todo),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(DeleteIcon, {\n        fontSize: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 33\n        }\n      })), /*#__PURE__*/React.createElement(FormDialog, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 29\n        }\n      }));\n    }\n  }));\n};\nexport default connect(null, dispatch => bindActionCreators({\n  show\n}, dispatch))(ListTask);","map":{"version":3,"sources":["/home/julia/ToDoList/my-app/src/pages/todo-list/display-task/components/listTask.tsx"],"names":["React","useState","DeleteIcon","makeStyles","Typography","Card","CardContent","IconButton","Checkbox","FormDialog","connect","bindActionCreators","show","useStyles","theme","root","display","paddingRight","spacing","margin","notCheck","flex","check","textDecoration","color","boxShadow","ListTask","idTodo","props","classes","removeTask","taskList","id","title","isCompleted","open","setOpen","handleClose","handleRemoveTask","task","console","log","handleOpen","reducer","name","map","todo","classCheked","dispatch"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { makeStyles, Typography, Card, CardContent, IconButton, Checkbox} from '@material-ui/core';\nimport { ITask } from '../../../../interfaces/ITask';\nimport  FormDialog  from '../../../../components/FormDialog';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { show } from 'redux-modal'\n\nconst useStyles = makeStyles((theme) => ({\n\n    root: {\n        display: 'flex',\n        paddingRight : theme.spacing(3),\n        margin : theme.spacing(1),\n      },\n      notCheck :{\n        flex: '1 0 auto',\n      },\n      check: {\n        flex: '1 0 auto',\n        textDecoration : 'line-through',\n        color: 'rgba(0, 0, 0, 0.12)',\n        boxShadow: 'none',\n      },\n}))\n\ninterface TodoListProps {\n    idTodo : number;\n}\n\nexport const ListTask : React.FC<TodoListProps> = ({idTodo, ...props}) => {\n\n    const classes = useStyles();\n    let removeTask : ITask; \n    const taskList : ITask[] = [\n        {\n            id: 7,\n            idTodo : 1,\n            title : 'покормить кота',\n            isCompleted : false,\n        },\n        {\n            id: 5,\n            idTodo : 1,\n            title : 'покормить себя',\n            isCompleted : false,\n        },\n        {\n            id: 6,\n            idTodo : 1,\n            title : 'покормить брата',\n            isCompleted : false,\n        },\n    ];\n    \n    const[open, setOpen] = useState(true);\n    \n    const handleClose = () => {\n        setOpen(false)\n    }\n    // const handleOpen = name => () => {\n    //     props.show(name, { message: `This is a ${name} modal` })\n    //   };\n    const handleRemoveTask = ( task : ITask) => {\n        // onRemove(task)\n        console.log('Задача удалена : ', task)\n        setOpen(false)\n    }\n\n    const handleOpen = (task : ITask) => {\n        setOpen(true)\n        removeTask = task\n        console.log(task)\n        const reducer = show.name\n        console.log(reducer)\n        \n    }\n    return(\n        <div>\n            {taskList.map((todo) => {\n                let classCheked = classes.notCheck\n                if(todo.isCompleted){\n                    classCheked = classes.check\n                }\n                if(todo.idTodo === idTodo){\n                    return(\n                        <Card key = {todo.id}  className = {classes.root}>\n                            <Checkbox\n                                checked = {todo.isCompleted}\n                                name = 'checkBox_toggle_task'/>\n                            <CardContent className = {classCheked}>\n                                <Typography variant = \"h6\" component = \"h6\">\n                                    {todo.title}\n                                </Typography>\n                            </CardContent>\n                            <IconButton aria-label = \"delete\" color=\"secondary\" edge=\"end\" onClick = {() => handleOpen(todo)}>\n                                <DeleteIcon fontSize = \"small\"/>\n                            </IconButton>\n                            <FormDialog />\n                        </Card>\n                    );\n                }\n                })}\n        </div>\n    )\n}\n\nexport default connect(\n    null,\n    dispatch => bindActionCreators({ show }, dispatch)\n)(ListTask)"]},"metadata":{},"sourceType":"module"}