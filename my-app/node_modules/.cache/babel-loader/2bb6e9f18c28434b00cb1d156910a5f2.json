{"ast":null,"code":"var _jsxFileName = \"/home/julia/ToDoList/my-app/src/pages/todo-list/display-todo/components/cardList.tsx\";\nimport React, { useCallback, useState } from 'react';\nimport { makeStyles, Grid, CardHeader, Card, CardActions, IconButton } from '@material-ui/core';\nimport { Add, Close } from '@material-ui/icons';\nimport DeleteTodo from '../../delete-todo';\nimport ListTasks from './listTask';\nimport FormCreateTask from '../../create-task';\nconst useStyles = makeStyles(theme => ({\n  cardMedia: {\n    display: 'block'\n  },\n  cardGrid: {\n    marginLeft: theme.spacing(3),\n    width: '90%'\n  }\n}));\n\nconst CardTodo = ({\n  todoList\n}) => {\n  const classes = useStyles();\n  const [todos, setTodos] = useState();\n  const [isCreateTask, setIsCreateTask] = useState(false);\n\n  const handleCreateTask = todo => {\n    setIsCreateTask(true);\n    setTodos(todo);\n  };\n\n  const handleCLoseForm = () => {\n    setIsCreateTask(false);\n  };\n\n  const handleForm = useCallback(result => {\n    if (result) {}\n\n    setIsCreateTask(result);\n  }, [setIsCreateTask]);\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"flex-start\",\n    alignItems: \"flex-start\",\n    spacing: 1,\n    className: classes.cardGrid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, todoList.map(todo => /*#__PURE__*/React.createElement(Grid, {\n    key: todo.id,\n    item: true,\n    xs: 6,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    action: isCreateTask && todo.id === todos.id ? /*#__PURE__*/React.createElement(IconButton, {\n      \"aria-label\": \"close\",\n      color: \"primary\",\n      onClick: () => handleCLoseForm(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Close, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 41\n      }\n    })) : /*#__PURE__*/React.createElement(IconButton, {\n      \"aria-label\": \"add\",\n      color: \"primary\",\n      onClick: () => handleCreateTask(todo),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Add, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 41\n      }\n    })),\n    title: todo.title,\n    subheader: \"\\u0412\\u0430\\u0448\\u0438 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0438: \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(CardActions, {\n    className: classes.cardMedia,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 25\n    }\n  }, isCreateTask && todo.id === todos.id ? /*#__PURE__*/React.createElement(FormCreateTask, {\n    idTodo: todos.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 33\n    }\n  }) : null, /*#__PURE__*/React.createElement(ListTasks, {\n    idTodo: todo.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(DeleteTodo, {\n    todo: todo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 29\n    }\n  }))))));\n};\n\nexport default CardTodo;","map":{"version":3,"sources":["/home/julia/ToDoList/my-app/src/pages/todo-list/display-todo/components/cardList.tsx"],"names":["React","useCallback","useState","makeStyles","Grid","CardHeader","Card","CardActions","IconButton","Add","Close","DeleteTodo","ListTasks","FormCreateTask","useStyles","theme","cardMedia","display","cardGrid","marginLeft","spacing","width","CardTodo","todoList","classes","todos","setTodos","isCreateTask","setIsCreateTask","handleCreateTask","todo","handleCLoseForm","handleForm","result","map","id","title"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from 'react';\nimport { ITodoList } from '../../../../interfaces/ITodoList';\nimport { makeStyles, Grid, CardHeader, Card, CardActions, IconButton } from '@material-ui/core';\nimport { Add, Close } from '@material-ui/icons';\nimport DeleteTodo from '../../delete-todo';\nimport ListTasks from './listTask';\nimport FormCreateTask from '../../create-task';\n\n\ninterface IProps{\n    todoList : ITodoList[];\n}\n\nconst useStyles = makeStyles((theme) => ({\n    cardMedia: {\n        display: 'block',\n    },\n    cardGrid: {\n        marginLeft : theme.spacing(3),\n        width : '90%'\n    },\n}));\n\nconst CardTodo : React.FC<IProps> = ({todoList}: IProps) => {\n    const classes = useStyles();\n    const [todos, setTodos] = useState<ITodoList>(); \n\n    const[isCreateTask, setIsCreateTask] = useState(false);\n\n    const handleCreateTask = (todo: ITodoList) =>{\n        setIsCreateTask(true);\n        setTodos(todo);\n    };\n    const handleCLoseForm = () =>{\n        setIsCreateTask(false);\n    };\n    \n    const handleForm = useCallback(\n        result => {\n            if(result){\n                \n            }\n            setIsCreateTask(result)\n        }, [setIsCreateTask]\n    )\n\n    return(\n        <Grid container\n            direction = 'row'\n            justify = 'flex-start'\n            alignItems = 'flex-start' \n            spacing = {1}\n            className = {classes.cardGrid}\n        >  \n            {todoList.map((todo) => (\n                <Grid key = {todo.id} item xs={6} md={3}>\n                    <Card>\n                        <CardHeader\n                            action= {\n                                isCreateTask && (todo.id === todos!.id) ?    \n                                    <IconButton  aria-label=\"close\" color=\"primary\" onClick = {() => handleCLoseForm()}>\n                                        <Close/>\n                                    </IconButton>\n                                    :  \n                                    <IconButton  aria-label=\"add\" color=\"primary\" onClick = {() => handleCreateTask(todo)}>\n                                        <Add/>\n                                    </IconButton>\n                                \n                            }\n                            title = {todo.title}\n                            subheader = \"Ваши задачи: \"\n                        />\n                        <CardActions className={classes.cardMedia}>\n                            {isCreateTask && (todo.id===todos!.id) ?\n                                <FormCreateTask idTodo = {todos!.id!}/>\n                                : null\n                            }\n                            <ListTasks idTodo = {todo.id!}/>\n                            <DeleteTodo todo = {todo}/>\n                        </CardActions>\n                    </Card>\n                </Grid>\n            ))}\n        </Grid>\n    );\n}\n\n\nexport default CardTodo;"]},"metadata":{},"sourceType":"module"}