{"ast":null,"code":"import { call, put, delay } from \"redux-saga/effects\";\nimport { fetchSendEmail, fetch_create_user, fetch_login_user, fetchResetPassword } from \"../../../services/services_user\";\nimport { CURRENT_USER, HIDE_ERROR, SHOW_ERROR } from \"../../actions/types\";\n\nfunction* show_error() {\n  yield put({\n    type: SHOW_ERROR\n  });\n  yield delay(2000);\n  yield put({\n    type: HIDE_ERROR\n  });\n}\n\nexport function* workerLoginUser(action) {\n  const user = action.user;\n  const {\n    history\n  } = action;\n  const login_user = {\n    username: user.username,\n    password: user.password\n  };\n\n  try {\n    const data = yield call(fetch_login_user, login_user);\n    localStorage.setItem('token', data.token);\n    const current_user = data.user;\n    yield put({\n      type: CURRENT_USER,\n      current_user\n    });\n    history.push('/todo/' + current_user.id);\n  } catch (error) {\n    console.log('ERROR_SAGA: ', error);\n    yishow_error();\n  }\n}\nexport function* workerCreateUser(action) {\n  const {\n    history\n  } = action;\n\n  try {\n    const data = yield call(fetch_create_user, action.user);\n\n    if (data.response === \"error\") {\n      show_error();\n    } else {\n      history.push('/');\n    }\n  } catch (error) {\n    console.log('ERROR_SAGA_SIGN_UP ', error);\n  }\n}\nexport function* workerResetPassword(action) {\n  const password = action.password;\n  const token = action.token;\n  const {\n    history\n  } = action;\n  yield call(fetchResetPassword, password, token, history);\n}\nexport function* workerSendEmail(action) {\n  const email = action.email;\n  const {\n    history\n  } = action;\n  yield call(fetchSendEmail, email, history);\n}","map":{"version":3,"sources":["/home/julia/ToDoList/my-app/src/store/saga/sagaUser/index.tsx"],"names":["call","put","delay","fetchSendEmail","fetch_create_user","fetch_login_user","fetchResetPassword","CURRENT_USER","HIDE_ERROR","SHOW_ERROR","show_error","type","workerLoginUser","action","user","history","login_user","username","password","data","localStorage","setItem","token","current_user","push","id","error","console","log","yishow_error","workerCreateUser","response","workerResetPassword","workerSendEmail","email"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,KAApB,QAAiC,oBAAjC;AACA,SAASC,cAAT,EAAyBC,iBAAzB,EAA4CC,gBAA5C,EAA8DC,kBAA9D,QAAwF,iCAAxF;AACA,SAASC,YAAT,EAAuBC,UAAvB,EAAmCC,UAAnC,QAAqD,qBAArD;;AAIA,UAAUC,UAAV,GAAsB;AAClB,QAAMT,GAAG,CAAC;AAACU,IAAAA,IAAI,EAAGF;AAAR,GAAD,CAAT;AACA,QAAMP,KAAK,CAAC,IAAD,CAAX;AACA,QAAMD,GAAG,CAAC;AAACU,IAAAA,IAAI,EAAGH;AAAR,GAAD,CAAT;AACH;;AAED,OAAO,UAAUI,eAAV,CAA0BC,MAA1B,EAAkC;AAErC,QAAMC,IAAY,GAAGD,MAAM,CAACC,IAA5B;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAcF,MAApB;AACA,QAAMG,UAAU,GAAG;AACfC,IAAAA,QAAQ,EAAGH,IAAI,CAACG,QADD;AAEfC,IAAAA,QAAQ,EAAGJ,IAAI,CAACI;AAFD,GAAnB;;AAIA,MAAG;AACC,UAAMC,IAAI,GAAI,MAAMnB,IAAI,CAACK,gBAAD,EAAkBW,UAAlB,CAAxB;AACAI,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BF,IAAI,CAACG,KAAnC;AAEA,UAAMC,YAAY,GAAGJ,IAAI,CAACL,IAA1B;AACA,UAAMb,GAAG,CAAC;AAACU,MAAAA,IAAI,EAAGJ,YAAR;AAAsBgB,MAAAA;AAAtB,KAAD,CAAT;AAEAR,IAAAA,OAAO,CAACS,IAAR,CAAa,WAAWD,YAAY,CAACE,EAArC;AAEH,GATD,CASC,OAAMC,KAAN,EAAY;AACTC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,KAA5B;AACAG,IAAAA,YAAY;AACf;AACJ;AAED,OAAO,UAAUC,gBAAV,CAA2BjB,MAA3B,EAAkC;AAErC,QAAM;AAAEE,IAAAA;AAAF,MAAcF,MAApB;;AAEA,MAAG;AACC,UAAMM,IAAI,GAAG,MAAMnB,IAAI,CAACI,iBAAD,EAAmBS,MAAM,CAACC,IAA1B,CAAvB;;AACA,QAAIK,IAAI,CAACY,QAAL,KAAkB,OAAtB,EAA8B;AAC1BrB,MAAAA,UAAU;AACb,KAFD,MAEK;AACDK,MAAAA,OAAO,CAACS,IAAR,CAAa,GAAb;AACH;AACJ,GAPD,CAOC,OAAME,KAAN,EAAY;AACTC,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAnC;AACH;AACJ;AAED,OAAO,UAAUM,mBAAV,CAA8BnB,MAA9B,EAAqC;AACxC,QAAMK,QAAiB,GAAGL,MAAM,CAACK,QAAjC;AACA,QAAMI,KAAK,GAAGT,MAAM,CAACS,KAArB;AACA,QAAM;AAAEP,IAAAA;AAAF,MAAeF,MAArB;AAEA,QAAMb,IAAI,CAACM,kBAAD,EAAqBY,QAArB,EAA+BI,KAA/B,EAAsCP,OAAtC,CAAV;AACH;AAED,OAAO,UAAUkB,eAAV,CAA0BpB,MAA1B,EAAiC;AACpC,QAAMqB,KAAc,GAAGrB,MAAM,CAACqB,KAA9B;AACA,QAAM;AAAEnB,IAAAA;AAAF,MAAeF,MAArB;AAEA,QAAMb,IAAI,CAACG,cAAD,EAAiB+B,KAAjB,EAAwBnB,OAAxB,CAAV;AACH","sourcesContent":["import { call, put, delay } from \"redux-saga/effects\" ;\nimport { fetchSendEmail, fetch_create_user, fetch_login_user, fetchResetPassword } from \"../../../services/services_user\";\nimport { CURRENT_USER, HIDE_ERROR, SHOW_ERROR } from \"../../actions/types\";\nimport { IUser } from \"../../../interfaces/IUser\";\n\n\nfunction* show_error(){\n    yield put({type : SHOW_ERROR})\n    yield delay(2000)\n    yield put({type : HIDE_ERROR});\n}\n\nexport function* workerLoginUser(action) {\n    \n    const user : IUser = action.user;\n    const { history } = action;\n    const login_user = {\n        username : user.username,\n        password : user.password!\n    };\n    try{\n        const data  = yield call(fetch_login_user,login_user);\n        localStorage.setItem('token', data.token);\n        \n        const current_user = data.user;\n        yield put({type : CURRENT_USER, current_user});\n        \n        history.push('/todo/' + current_user.id);\n\n    }catch(error){\n        console.log('ERROR_SAGA: ', error);\n        yishow_error()\n    }\n}\n\nexport function* workerCreateUser(action){\n    \n    const { history } = action;\n    \n    try{\n        const data = yield call(fetch_create_user,action.user);\n        if (data.response === \"error\"){\n            show_error()\n        }else{\n            history.push('/');\n        }\n    }catch(error){\n        console.log('ERROR_SAGA_SIGN_UP ', error )\n    }\n}\n\nexport function* workerResetPassword(action){\n    const password : string = action.password;\n    const token = action.token\n    const { history }  = action;\n\n    yield call(fetchResetPassword, password, token, history);\n}\n\nexport function* workerSendEmail(action){\n    const email : string = action.email;\n    const { history }  = action;\n\n    yield call(fetchSendEmail, email, history);\n}"]},"metadata":{},"sourceType":"module"}