{"ast":null,"code":"var _jsxFileName = \"/home/julia/ToDoList/my-app/src/TodoList/pages/TodoList/index.tsx\";\nimport React from 'react';\nimport { makeStyles, TextField } from '@material-ui/core';\n\nconst renderTextField = ({\n  input,\n  label,\n  meta: {\n    touched,\n    error,\n    invalid\n  },\n  ...custom\n}) => /*#__PURE__*/React.createElement(TextField, Object.assign({\n  autoComplete: label,\n  label: \"\\u041D\\u0430\\u0438\\u043C\\u0435\\u043D\\u043E\\u0432\\u0430\\u043D\\u0438\\u0435 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0438\",\n  margin: \"normal\",\n  fullWidth: true,\n  id: \"text_field\",\n  name: \"task\",\n  error: touched && invalid,\n  helperText: touched && error,\n  required: true,\n  type: label,\n  variant: \"standard\"\n}, input, custom, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }\n}));\n\nexport function validations(values) {\n  const error = {};\n\n  if (!values['task']) {\n    error['task'] = 'Необходимо ввести наименование задачи';\n  }\n\n  return error;\n}\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  title: {\n    flexGrow: 1\n  },\n  submit: {\n    margin: theme.spacing(3.5, 0, 0, 2),\n    textAlign: 'center'\n  },\n  textField: {\n    textAlign: 'center',\n    marginLeft: theme.spacing(3),\n    color: theme.palette.text.secondary\n  }\n})); // export const WindowTask : React.FC<ITodo & InjectedFormProps<{}, ITodo> & RouteComponentProps<{pk: string}>> = ({\n//    match: { params },\n//    history, \n//    ...props\n// }: any) => {\n//     const classes = useStyles();\n//     const { pk } = params;\n//     // const[todoList, setTodo] = useState<ITodo[]>([])\n//     const [response, setResponse] = useState([''])    \n//     const handleSubmit = ( values : any ) => {\n//         // const newTask : ITodo = {\n//         //     id : null,\n//         //     user : pk,\n//         //     name : values.task,\n//         //     completed : false\n//         // }\n//         props.onAddTask(newTask)\n//         setResponse([newTask.name])\n//         console.log('RESPONSE_CREATE : ', response)\n//     }\n//     const onToggle = (task : ITodo) =>{\n//         props.onToggle(task)\n//         setResponse([task.completed + ' ' + task.name])\n//         console.log('RESPONSE_TOGGLE : ', response)\n//     }\n//     const onRemove = (task : ITodo) =>{\n//         props.onRemove(task)\n//         setResponse(['remove_task ' + task.name])\n//         console.log('RESPONSE_REMOVE : ', response)\n//     }\n//     const handleLogout = () => {\n//         localStorage.removeItem('token')\n//         props.onLogout()\n//         history.push('/')\n//     }\n//     useEffect(() => {\n//         if(localStorage.getItem('token')){\n//             console.log('FETCHING...')\n//             fetch('http://127.0.0.1:8000/api/task_list/' + pk,\n//             {\n//                 mode: 'cors',\n//                 headers: {\n//                     Authorization : 'JWT ' + localStorage.getItem('token')\n//                 },\n//             })\n//             .then(response => response.json())\n//             .then(data => {\n//                 setTodo(data)\n//                 //console.log(data)\n//             })\n//             .catch((error) => console.log('ERROR1: ', error))\n//         }\n//     }, [response])\n//     return(\n//         <div className = {classes.root}>\n//             <AppBar position = \"static\">\n//                 <Toolbar>\n//                     <Typography variant=\"h6\" className = {classes.title}>\n//                         {props.username}\n//                     </Typography>\n//                     <Button color=\"inherit\" onClick = {() => handleLogout()}>\n//                         Выход\n//                     </Button>\n//                 </Toolbar>\n//             </AppBar>\n//             <form onSubmit = {props.handleSubmit(handleSubmit)}>\n//                     <Grid container\n//                         spacing={2}\n//                         direction=\"row\"\n//                         justify=\"center\"\n//                         alignItems=\"flex-start\">\n//                         <Grid item xs >\n//                             <Field name = \"task\" \n//                             component = {renderTextField} \n//                             id= 'field_task'\n//                             label = \"string\"\n//                             className = {classes.textField}/>\n//                         </Grid>\n//                         <Grid item xs={3}>\n//                             <Button \n//                                 name= \"create_task\"\n//                                 type=\"submit\"\n//                                 variant = \"contained\"\n//                                 color = \"primary\"\n//                                 className = {classes.submit}>\n//                                  Создать\n//                             </Button>\n//                         </Grid>\n//                     </Grid>    \n//             </form>\n//             {/* <ListTask todoList = { todoList } onRemove = {onRemove} onToggle = {onToggle} /> */}\n//         </div>\n//     )\n// }\n// const form = reduxForm<{}, ITodo>({\n//     form : 'createTask', \n//     validate: validations\n// })(withRouter(WindowTask));\n// export default form","map":{"version":3,"sources":["/home/julia/ToDoList/my-app/src/TodoList/pages/TodoList/index.tsx"],"names":["React","makeStyles","TextField","renderTextField","input","label","meta","touched","error","invalid","custom","validations","values","useStyles","theme","root","flexGrow","title","submit","margin","spacing","textAlign","textField","marginLeft","color","palette","text","secondary"],"mappings":";AAAA,OAAOA,KAAP,MAA2C,OAA3C;AAEA,SAASC,UAAT,EAAiCC,SAAjC,QAAgF,mBAAhF;;AAIA,MAAMC,eAAe,GAAG,CAAC;AACrBC,EAAAA,KADqB;AAErBC,EAAAA,KAFqB;AAGrBC,EAAAA,IAAI,EAAG;AAACC,IAAAA,OAAD;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA;AAAjB,GAHc;AAIrB,KAAGC;AAJkB,CAAD,kBAMpB,oBAAC,SAAD;AACI,EAAA,YAAY,EAAIL,KADpB;AAEI,EAAA,KAAK,EAAG,+GAFZ;AAGI,EAAA,MAAM,EAAG,QAHb;AAII,EAAA,SAAS,MAJb;AAKI,EAAA,EAAE,EAAG,YALT;AAMI,EAAA,IAAI,EAAC,MANT;AAOI,EAAA,KAAK,EAAEE,OAAO,IAAIE,OAPtB;AAQI,EAAA,UAAU,EAAEF,OAAO,IAAIC,KAR3B;AASI,EAAA,QAAQ,MATZ;AAUI,EAAA,IAAI,EAAIH,KAVZ;AAWI,EAAA,OAAO,EAAG;AAXd,GAYQD,KAZR,EAaQM,MAbR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GANJ;;AAuBA,OAAO,SAASC,WAAT,CAAqBC,MAArB,EAA4B;AAC/B,QAAMJ,KAAK,GAAG,EAAd;;AACA,MAAG,CAACI,MAAM,CAAC,MAAD,CAAV,EAAmB;AACfJ,IAAAA,KAAK,CAAC,MAAD,CAAL,GAAgB,uCAAhB;AACH;;AACD,SAAOA,KAAP;AACH;AAED,MAAMK,SAAS,GAAGZ,UAAU,CAAEa,KAAD,KAAY;AAErCC,EAAAA,IAAI,EAAG;AACHC,IAAAA,QAAQ,EAAG;AADR,GAF8B;AAKrCC,EAAAA,KAAK,EAAG;AACJD,IAAAA,QAAQ,EAAE;AADN,GAL6B;AAQrCE,EAAAA,MAAM,EAAG;AACLC,IAAAA,MAAM,EAAEL,KAAK,CAACM,OAAN,CAAc,GAAd,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CADH;AAELC,IAAAA,SAAS,EAAE;AAFN,GAR4B;AAYrCC,EAAAA,SAAS,EAAE;AACPD,IAAAA,SAAS,EAAE,QADJ;AAEPE,IAAAA,UAAU,EAAET,KAAK,CAACM,OAAN,CAAc,CAAd,CAFL;AAGPI,IAAAA,KAAK,EAAEV,KAAK,CAACW,OAAN,CAAcC,IAAd,CAAmBC;AAHnB;AAZ0B,CAAZ,CAAD,CAA5B,C,CAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { reduxForm, InjectedFormProps, Field } from 'redux-form';\nimport { makeStyles, Typography, TextField, Button, AppBar, Toolbar, Grid} from '@material-ui/core';\nimport { RouteComponentProps } from 'react-router';\nimport { withRouter } from 'react-router-dom';\n\nconst renderTextField = ({\n    input, \n    label,\n    meta : {touched, error, invalid},\n    ...custom\n }) => (\n    <TextField\n        autoComplete = {label}\n        label = \"Наименование задачи\"\n        margin = 'normal'\n        fullWidth\n        id = 'text_field'\n        name='task'\n        error={touched && invalid}\n        helperText={touched && error}\n        required\n        type = {label}\n        variant = 'standard'\n        {...input}\n        {...custom}\n    />\n)\n\nexport function validations(values){\n    const error = {};\n    if(!values['task']){\n        error['task'] = 'Необходимо ввести наименование задачи'\n    }\n    return error\n}\n\nconst useStyles = makeStyles((theme) => ({\n\n    root : {\n        flexGrow : 1,\n    },\n    title : {\n        flexGrow: 1,\n    },\n    submit : {\n        margin: theme.spacing(3.5, 0, 0, 2),\n        textAlign: 'center',\n    },\n    textField :{\n        textAlign: 'center',\n        marginLeft: theme.spacing(3),\n        color: theme.palette.text.secondary,\n    },\n}))\n\n\n// export const WindowTask : React.FC<ITodo & InjectedFormProps<{}, ITodo> & RouteComponentProps<{pk: string}>> = ({\n//    match: { params },\n//    history, \n//    ...props\n// }: any) => {\n//     const classes = useStyles();\n//     const { pk } = params;\n//     // const[todoList, setTodo] = useState<ITodo[]>([])\n//     const [response, setResponse] = useState([''])    \n\n//     const handleSubmit = ( values : any ) => {\n\n//         // const newTask : ITodo = {\n//         //     id : null,\n//         //     user : pk,\n//         //     name : values.task,\n//         //     completed : false\n//         // }\n\n//         props.onAddTask(newTask)\n//         setResponse([newTask.name])\n//         console.log('RESPONSE_CREATE : ', response)\n//     }\n\n//     const onToggle = (task : ITodo) =>{\n//         props.onToggle(task)\n//         setResponse([task.completed + ' ' + task.name])\n//         console.log('RESPONSE_TOGGLE : ', response)\n//     }\n\n//     const onRemove = (task : ITodo) =>{\n//         props.onRemove(task)\n//         setResponse(['remove_task ' + task.name])\n//         console.log('RESPONSE_REMOVE : ', response)\n//     }\n\n//     const handleLogout = () => {\n//         localStorage.removeItem('token')\n//         props.onLogout()\n//         history.push('/')\n//     }\n\n\n//     useEffect(() => {\n//         if(localStorage.getItem('token')){\n//             console.log('FETCHING...')\n//             fetch('http://127.0.0.1:8000/api/task_list/' + pk,\n//             {\n//                 mode: 'cors',\n//                 headers: {\n//                     Authorization : 'JWT ' + localStorage.getItem('token')\n//                 },\n//             })\n//             .then(response => response.json())\n//             .then(data => {\n//                 setTodo(data)\n//                 //console.log(data)\n        \n//             })\n//             .catch((error) => console.log('ERROR1: ', error))\n//         }\n//     }, [response])\n\n\n//     return(\n//         <div className = {classes.root}>\n//             <AppBar position = \"static\">\n//                 <Toolbar>\n//                     <Typography variant=\"h6\" className = {classes.title}>\n//                         {props.username}\n//                     </Typography>\n//                     <Button color=\"inherit\" onClick = {() => handleLogout()}>\n//                         Выход\n//                     </Button>\n//                 </Toolbar>\n//             </AppBar>\n//             <form onSubmit = {props.handleSubmit(handleSubmit)}>\n//                     <Grid container\n//                         spacing={2}\n//                         direction=\"row\"\n//                         justify=\"center\"\n//                         alignItems=\"flex-start\">\n//                         <Grid item xs >\n//                             <Field name = \"task\" \n//                             component = {renderTextField} \n//                             id= 'field_task'\n//                             label = \"string\"\n//                             className = {classes.textField}/>\n//                         </Grid>\n//                         <Grid item xs={3}>\n//                             <Button \n//                                 name= \"create_task\"\n//                                 type=\"submit\"\n//                                 variant = \"contained\"\n//                                 color = \"primary\"\n//                                 className = {classes.submit}>\n//                                  Создать\n//                             </Button>\n//                         </Grid>\n//                     </Grid>    \n//             </form>\n//             {/* <ListTask todoList = { todoList } onRemove = {onRemove} onToggle = {onToggle} /> */}\n           \n//         </div>\n//     )\n// }\n\n// const form = reduxForm<{}, ITodo>({\n//     form : 'createTask', \n//     validate: validations\n// })(withRouter(WindowTask));\n\n// export default form"]},"metadata":{},"sourceType":"module"}