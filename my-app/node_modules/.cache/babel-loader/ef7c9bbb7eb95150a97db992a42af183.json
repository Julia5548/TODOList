{"ast":null,"code":"import { getCookie } from \"./cookie\";\nconst csrftoken = getCookie('csrftoken');\n\nconst dataFetch = (url, data) => {\n  return new Request(url, {\n    mode: 'cors',\n    headers: {\n      'Content-type': 'application/json',\n      'X-CSRFToken': csrftoken\n    },\n    method: 'POST',\n    body: JSON.stringify(data)\n  });\n};\n\nexport async function fetchLoginUser(login_user) {\n  // console.log(dataFetch)\n  const response = fetch(dataFetch('http://127.0.0.1:8000/api/v1/token/auth/', login_user));\n  const data = response.then(response => response.json()).catch(error => {\n    console.log('ERROR_FETCH: ', error);\n  });\n  return await data;\n}\n\nconst prepareBodyRequest = (payload, jsonRequest = false) => {\n  return '';\n};\n\nconst request = (url, data, token, jsonRequest = true) => {\n  const body = prepareBodyRequest(data.user, jsonRequest);\n  console.log('jsonRequest ', jsonRequest);\n  return fetchLoginUser('');\n};\n\nexport const signIn = user => request('token/auth/', {\n  method: 'POST',\n  user\n});","map":{"version":3,"sources":["/home/julia/ToDoList/my-app/src/services/servicesProp.tsx"],"names":["getCookie","csrftoken","dataFetch","url","data","Request","mode","headers","method","body","JSON","stringify","fetchLoginUser","login_user","response","fetch","then","json","catch","error","console","log","prepareBodyRequest","payload","jsonRequest","request","token","user","signIn"],"mappings":"AAAA,SAASA,SAAT,QAA0B,UAA1B;AAIA,MAAMC,SAAS,GAAGD,SAAS,CAAC,WAAD,CAA3B;;AAEA,MAAME,SAAS,GAAG,CAACC,GAAD,EAAeC,IAAf,KAAwB;AACtC,SACI,IAAIC,OAAJ,CAAYF,GAAZ,EAAgB;AACZG,IAAAA,IAAI,EAAG,MADK;AAERC,IAAAA,OAAO,EAAE;AACL,sBAAiB,kBADZ;AAEL,qBAAgBN;AAFX,KAFD;AAMZO,IAAAA,MAAM,EAAG,MANG;AAOZC,IAAAA,IAAI,EAAGC,IAAI,CAACC,SAAL,CAAeP,IAAf;AAPK,GAAhB,CADJ;AAWH,CAZD;;AAcA,OAAO,eAAeQ,cAAf,CAA8BC,UAA9B,EAAyC;AAE5C;AACA,QAAMC,QAAQ,GAAGC,KAAK,CAACb,SAAS,CAAC,0CAAD,EAA6CW,UAA7C,CAAV,CAAtB;AAEA,QAAMT,IAAI,GAAGU,QAAQ,CAACE,IAAT,CAAcF,QAAQ,IAC/BA,QAAQ,CAACG,IAAT,EADS,EAEXC,KAFW,CAELC,KAAK,IAAI;AACbC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,KAA7B;AACH,GAJY,CAAb;AAMA,SAAO,MAAMf,IAAb;AACH;;AAyBD,MAAMkB,kBAAkB,GAAG,CAAoBC,OAApB,EAAgCC,WAAoB,GAAG,KAAvD,KAAsF;AAC7G,SAAO,EAAP;AACH,CAFD;;AAGA,MAAMC,OAAO,GAAG,CACZtB,GADY,EAEZC,IAFY,EAGZsB,KAHY,EAIZF,WAAqB,GAAG,IAJZ,KAKgB;AAE5B,QAAMf,IAAI,GAAGa,kBAAkB,CAAUlB,IAAI,CAACuB,IAAf,EAAsBH,WAAtB,CAA/B;AACAJ,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BG,WAA5B;AACA,SAAOZ,cAAc,CAAC,EAAD,CAArB;AACH,CAVD;;AAeA,OAAO,MAAMgB,MAAM,GAAGD,IAAD,IAAkBF,OAAO,CAC1C,aAD0C,EAC3B;AAACjB,EAAAA,MAAM,EAAG,MAAV;AAAmBmB,EAAAA;AAAnB,CAD2B,CAAvC","sourcesContent":["import { getCookie } from \"./cookie\";\nimport { IUser } from \"../interfaces/IUser\";\n\n\nconst csrftoken = getCookie('csrftoken');\n\nconst dataFetch = (url : string, data) => {\n    return (\n        new Request(url,{\n            mode : 'cors',\n                headers: {\n                    'Content-type' : 'application/json',\n                    'X-CSRFToken' : csrftoken!,\n                },\n            method : 'POST',\n            body : JSON.stringify(data)\n        })\n    );\n}\n\nexport async function fetchLoginUser(login_user){\n\n    // console.log(dataFetch)\n    const response = fetch(dataFetch('http://127.0.0.1:8000/api/v1/token/auth/', login_user))\n\n    const data = response.then(response =>\n        response.json()\n    ).catch(error => {\n        console.log('ERROR_FETCH: ', error);\n    });\n\n    return await data;\n}\nexport type Empty = {}\ntype Query = Record<string, any>;\ntype Payload = Record<string, any>;\ntype Response = Record<string, any>;\n\ninterface RequestData<P extends Payload, Q extends Query> extends RequestInit{\n    user? : P;\n    query? : Q;\n}\n\ninterface ResponseBody<R extends Response > {\n    data?: R;\n    status: number;\n    statusText: string;\n    headers: Headers;\n    code?: number;\n}\n  \ninterface ResponseData<R extends Response >{ \n    response?: ResponseBody<R>;\n    error?: any;\n}\n\n\nconst prepareBodyRequest = <T extends Payload>(payload: T, jsonRequest: boolean = false ) : string | FormData => {\n    return '';\n}\nconst request = <P extends Payload, R extends Response,Q extends Query>(\n    url : string,\n    data: RequestData<P, Q>,\n    token? : string,\n    jsonRequest : boolean = true\n) : Promise<ResponseData<R>> => {\n\n    const body = prepareBodyRequest<Payload>(data.user!, jsonRequest)\n    console.log('jsonRequest ', jsonRequest)\n    return fetchLoginUser('')\n}\n\ninterface TokenResponse{\n    token : string;\n}\nexport const signIn =(user : IUser) => request<IUser, TokenResponse, Empty>(\n    'token/auth/', {method : 'POST',  user},\n);"]},"metadata":{},"sourceType":"module"}