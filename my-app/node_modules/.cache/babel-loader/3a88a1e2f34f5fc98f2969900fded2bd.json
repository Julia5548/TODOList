{"ast":null,"code":"import { call, delay, put } from \"redux-saga/effects\";\nimport { fetchSendEmail, fetchCreateUser, fetchLoginUser, fetchResetPassword, fetchGetDataUser } from \"../../../services/services_user\";\nimport { CURRENT_USER, HIDE_ERROR, INITIAL_USER, SHOW_ERROR } from \"../../actions/types\";\n\nfunction* show_error() {\n  yield put({\n    type: SHOW_ERROR\n  });\n  yield delay(2000);\n  yield put({\n    type: HIDE_ERROR\n  });\n}\n\nexport function* workGetUser(action) {\n  const {\n    history\n  } = action;\n\n  try {\n    const current_user = yield call(fetchGetDataUser);\n\n    if (current_user !== undefined && current_user.id !== undefined) {\n      yield put({\n        type: CURRENT_USER,\n        current_user\n      });\n      history.push(`/todo/${current_user.id}`);\n    } else {\n      localStorage.removeItem('token');\n      yield put({\n        type: INITIAL_USER\n      });\n    }\n  } catch (error) {\n    console.log('ERROR_SAGA ', error);\n  }\n}\nexport function* workerLoginUser(action) {\n  const user = action.user;\n  const {\n    history\n  } = action;\n  const login_user = {\n    username: user.username,\n    password: user.password\n  };\n\n  try {\n    const data = yield call(fetchLoginUser, login_user);\n    localStorage.setItem('token', data.token);\n    const current_user = data.user;\n    yield put({\n      type: CURRENT_USER,\n      current_user\n    });\n    history.push('/todo/' + current_user.id);\n  } catch (error) {\n    console.log('ERROR_SAGA: ', error);\n    yield call(show_error);\n  }\n}\nexport function* workerCreateUser(action) {\n  const {\n    history\n  } = action;\n\n  try {\n    const data = yield call(fetchCreateUser, action.user);\n    console.log(data);\n\n    if (data.username !== undefined) {\n      yield call(show_error);\n    } else if (data.password !== undefined) {\n      yield call(show_error);\n    } else {\n      history.push('/');\n    }\n  } catch (error) {\n    console.log('ERROR_SAGA_SIGN_UP ', error);\n  }\n}\nexport function* workerResetPassword(action) {\n  const password = action.password;\n  const token = action.token;\n  const {\n    history\n  } = action;\n\n  try {\n    yield call(fetchResetPassword, password, token, history);\n  } catch (error) {\n    console.log('ERROR_SAGA ', error);\n  }\n}\nexport function* workerSendEmail(action) {\n  const email = action.email;\n  const {\n    history\n  } = action;\n\n  try {\n    yield call(fetchSendEmail, email, history);\n  } catch (error) {\n    console.log('ERROR_SAGA ', error);\n  }\n}","map":{"version":3,"sources":["/home/julia/ToDoList/my-app/src/store/saga/sagaUser/index.tsx"],"names":["call","delay","put","fetchSendEmail","fetchCreateUser","fetchLoginUser","fetchResetPassword","fetchGetDataUser","CURRENT_USER","HIDE_ERROR","INITIAL_USER","SHOW_ERROR","show_error","type","workGetUser","action","history","current_user","undefined","id","push","localStorage","removeItem","error","console","log","workerLoginUser","user","login_user","username","password","data","setItem","token","workerCreateUser","workerResetPassword","workerSendEmail","email"],"mappings":"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","sourcesContent":["import { call, delay, put } from \"redux-saga/effects\" ;\nimport { fetchSendEmail, fetchCreateUser, fetchLoginUser, fetchResetPassword, fetchGetDataUser } from \"../../../services/services_user\";\nimport { CURRENT_USER, HIDE_ERROR, INITIAL_USER, SHOW_ERROR } from \"../../actions/types\";\nimport { IUser } from \"../../../interfaces/IUser\";\n\n\nfunction* show_error(){\n    yield put({type : SHOW_ERROR});\n    yield delay(2000);\n    yield put({type : HIDE_ERROR});\n}\n\nexport function* workGetUser(action){\n    const { history } = action;\n    \n    try{\n        const current_user = yield call(fetchGetDataUser);\n        if(current_user !== undefined && current_user.id !== undefined){\n            yield put({type: CURRENT_USER, current_user})\n            history.push(`/todo/${current_user.id}`);\n        }else{\n            localStorage.removeItem('token');\n            yield put({type: INITIAL_USER})\n        }\n    } catch(error){\n        console.log('ERROR_SAGA ', error);\n    }\n}\n\nexport function* workerLoginUser(action) {\n    \n    const user : IUser = action.user;\n    const { history } = action;\n    const login_user = {\n        username : user.username,\n        password : user.password!\n    };\n    try{\n        const data  = yield call(fetchLoginUser,login_user);\n        localStorage.setItem('token', data.token);\n        \n        const current_user = data.user;\n        yield put({type : CURRENT_USER, current_user});\n        \n        history.push('/todo/' + current_user.id);\n\n    }catch(error){\n        console.log('ERROR_SAGA: ', error);\n        yield call(show_error)\n    }\n}\n\nexport function* workerCreateUser(action){\n    \n    const { history } = action;\n    \n    try{\n        const data = yield call(fetchCreateUser,action.user);\n        console.log(data)\n        if (data.username !== undefined){\n            yield call(show_error)\n        }else if(data.password !== undefined){yield call(show_error)}\n        else{\n            history.push('/');\n        }\n    }catch(error){\n        console.log('ERROR_SAGA_SIGN_UP ', error )\n    }\n}\n\nexport function* workerResetPassword(action){\n    const password : string = action.password;\n    const token = action.token\n    const { history }  = action;\n    try {\n        yield call(fetchResetPassword, password, token, history);\n    }catch(error){\n        console.log('ERROR_SAGA ', error )\n    }\n}\n\nexport function* workerSendEmail(action){\n    const email : string = action.email;\n    const { history }  = action;\n    \n    try {\n        yield call(fetchSendEmail, email, history);\n    }catch(error){\n        console.log('ERROR_SAGA ', error )\n    }\n    \n}"]},"metadata":{},"sourceType":"module"}