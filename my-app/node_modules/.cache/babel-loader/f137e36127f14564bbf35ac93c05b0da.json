{"ast":null,"code":"import { call, takeEvery, put } from \"redux-saga/effects\";\nimport { fetch_create_user, fetch_login_user, fetch_reset_password } from \"../../api_fetch/fetch_user\";\nimport { LOGIN_USER, CURRENT_USER, CREATE_USER, RESET_PASSWORD } from \"../../actions/types\";\nexport function* watch_login_user() {\n  yield takeEvery(LOGIN_USER, worker_login_user);\n}\n\nfunction* worker_login_user(action) {\n  console.log('LOGIN_USER ');\n  const user = action.user;\n  const {\n    history\n  } = action;\n  const login_user = {\n    username: user.username,\n    password: user.password\n  };\n\n  try {\n    const data = yield call(() => fetch_login_user(login_user));\n    localStorage.setItem('token', data.token);\n    const current_user = data.user;\n    yield put({\n      type: CURRENT_USER,\n      current_user\n    });\n    const url = '/todo/' + current_user.id;\n    history.push(url);\n  } catch (error) {\n    console.log('ERROR: ', error);\n  }\n}\n\nexport function* watch_create_user() {\n  yield takeEvery(CREATE_USER, worker_create_user);\n}\n\nfunction* worker_create_user(action) {\n  const {\n    history\n  } = action;\n  yield call(() => fetch_create_user(action.user, history));\n}\n\nexport function* watch_reset_password() {\n  yield takeEvery(RESET_PASSWORD, worker_reset_password);\n}\n\nfunction* worker_reset_password(action) {\n  const email = action.email;\n  const {\n    history\n  } = action;\n  yield call(() => fetch_reset_password(email, history));\n}","map":{"version":3,"sources":["/home/julia/ToDoList/my-app/src/saga/sagaUser/index.tsx"],"names":["call","takeEvery","put","fetch_create_user","fetch_login_user","fetch_reset_password","LOGIN_USER","CURRENT_USER","CREATE_USER","RESET_PASSWORD","watch_login_user","worker_login_user","action","console","log","user","history","login_user","username","password","data","localStorage","setItem","token","current_user","type","url","id","push","error","watch_create_user","worker_create_user","watch_reset_password","worker_reset_password","email"],"mappings":"AAAA,SAASA,IAAT,EAAeC,SAAf,EAA0BC,GAA1B,QAAqC,oBAArC;AAEA,SAASC,iBAAT,EAA4BC,gBAA5B,EAA8CC,oBAA9C,QAA0E,4BAA1E;AACA,SAASC,UAAT,EAAqBC,YAArB,EAAmCC,WAAnC,EAAgDC,cAAhD,QAAsE,qBAAtE;AAGA,OAAO,UAAUC,gBAAV,GAA4B;AAC/B,QAAMT,SAAS,CAACK,UAAD,EAAaK,iBAAb,CAAf;AACH;;AAED,UAAUA,iBAAV,CAA4BC,MAA5B,EAAoC;AAEhCC,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA,QAAMC,IAAY,GAAGH,MAAM,CAACG,IAA5B;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAcJ,MAApB;AACA,QAAMK,UAAU,GAAG;AACfC,IAAAA,QAAQ,EAAGH,IAAI,CAACG,QADD;AAEfC,IAAAA,QAAQ,EAAGJ,IAAI,CAACI;AAFD,GAAnB;;AAIA,MAAG;AACC,UAAMC,IAAI,GAAI,MAAMpB,IAAI,CAAC,MAAMI,gBAAgB,CAACa,UAAD,CAAvB,CAAxB;AACAI,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BF,IAAI,CAACG,KAAnC;AAEA,UAAMC,YAAY,GAAGJ,IAAI,CAACL,IAA1B;AACA,UAAMb,GAAG,CAAC;AAACuB,MAAAA,IAAI,EAAGlB,YAAR;AAAsBiB,MAAAA;AAAtB,KAAD,CAAT;AAEA,UAAME,GAAY,GAAG,WAAWF,YAAY,CAACG,EAA7C;AACAX,IAAAA,OAAO,CAACY,IAAR,CAAaF,GAAb;AAEH,GAVD,CAUC,OAAMG,KAAN,EAAY;AACThB,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBe,KAAvB;AACH;AACJ;;AAGD,OAAO,UAAUC,iBAAV,GAA6B;AAChC,QAAM7B,SAAS,CAACO,WAAD,EAAcuB,kBAAd,CAAf;AACH;;AAED,UAAUA,kBAAV,CAA6BnB,MAA7B,EAAoC;AAEhC,QAAM;AAAEI,IAAAA;AAAF,MAAcJ,MAApB;AAEA,QAAMZ,IAAI,CAAC,MAAMG,iBAAiB,CAACS,MAAM,CAACG,IAAR,EAAcC,OAAd,CAAxB,CAAV;AACH;;AAED,OAAO,UAAUgB,oBAAV,GAAgC;AACnC,QAAM/B,SAAS,CAACQ,cAAD,EAAiBwB,qBAAjB,CAAf;AACH;;AAED,UAAUA,qBAAV,CAAgCrB,MAAhC,EAAuC;AACnC,QAAMsB,KAAc,GAAGtB,MAAM,CAACsB,KAA9B;AACA,QAAM;AAAElB,IAAAA;AAAF,MAAeJ,MAArB;AAEA,QAAMZ,IAAI,CAAC,MAAMK,oBAAoB,CAAC6B,KAAD,EAAQlB,OAAR,CAA3B,CAAV;AACH","sourcesContent":["import { call, takeEvery, put } from \"redux-saga/effects\" ;\nimport { IUser } from \"../../interface\";\nimport { fetch_create_user, fetch_login_user, fetch_reset_password } from \"../../api_fetch/fetch_user\";\nimport { LOGIN_USER, CURRENT_USER, CREATE_USER, RESET_PASSWORD } from \"../../actions/types\";\n\n\nexport function* watch_login_user(){\n    yield takeEvery(LOGIN_USER, worker_login_user);\n}\n\nfunction* worker_login_user(action) {\n    \n    console.log('LOGIN_USER ')\n    const user : IUser = action.user;\n    const { history } = action;\n    const login_user = {\n        username : user.username,\n        password : user.password!\n    };\n    try{\n        const data  = yield call(() => fetch_login_user(login_user));\n        localStorage.setItem('token', data.token);\n        \n        const current_user = data.user;\n        yield put({type : CURRENT_USER, current_user});\n        \n        const url : string = '/todo/' + current_user.id;\n        history.push(url);\n\n    }catch(error){\n        console.log('ERROR: ', error)\n    }\n}\n\n\nexport function* watch_create_user(){\n    yield takeEvery(CREATE_USER, worker_create_user);\n}\n\nfunction* worker_create_user(action){\n    \n    const { history } = action;\n    \n    yield call(() => fetch_create_user(action.user, history));\n}\n\nexport function* watch_reset_password(){\n    yield takeEvery(RESET_PASSWORD, worker_reset_password);\n}\n\nfunction* worker_reset_password(action){\n    const email : string = action.email;\n    const { history }  = action;\n\n    yield call(() => fetch_reset_password(email, history));\n}"]},"metadata":{},"sourceType":"module"}