{"ast":null,"code":"var _jsxFileName = \"/home/julia/ToDoList/my-app/src/pages/auth/sing_up/components/formSignUp.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { RenderTextField } from \"../../../../components/TextField\";\nimport { Button, makeStyles, Grid } from \"@material-ui/core\";\nimport { NavLink } from \"react-router-dom\";\nimport Alert from \"../../../../components/Alert/index\";\nconst useStyles = makeStyles(theme => ({\n  submit: {\n    margin: theme.spacing(3, 0, 2)\n  }\n}));\n\nconst Form = ({\n  error,\n  isErrorAuth,\n  ...props\n}) => {\n  const classes = useStyles();\n  const [textError, setError] = useState('');\n  useEffect(() => {\n    if (error) {\n      console.log(\"1\");\n\n      if (error.username && error.password) {\n        setError(\"Такой пользователь существует. Пароль слишком легкий.\");\n        console.log(\"2\");\n      } else if (error.password) {\n        tsetError(\"Пароль слишком легкий.\");\n      } else if (error.username) {\n        setError(\"Такой пользователь существует.\");\n      }\n    }\n  }, [error]);\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: props.handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Field, {\n    name: \"username\",\n    component: RenderTextField,\n    label: \"username\",\n    type: \"username\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Field, {\n    name: \"email\",\n    component: RenderTextField,\n    label: \"email\",\n    type: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Field, {\n    name: \"password\",\n    component: RenderTextField,\n    label: \"password\",\n    type: \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    fullWidth: true,\n    variant: \"contained\",\n    color: \"primary\",\n    className: classes.submit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }, \"\\u0417\\u0430\\u0440\\u0435\\u0433\\u0438\\u0441\\u0442\\u0440\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C\\u0441\\u044F\"), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"flex-end\",\n    alignItems: \"baseline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(NavLink, {\n    to: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 21\n    }\n  }, \"\\u0410\\u0432\\u0442\\u043E\\u0440\\u0438\\u0437\\u0430\\u0446\\u0438\\u044F\")), isErrorAuth && /*#__PURE__*/React.createElement(Alert, {\n    error_text: textError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 29\n    }\n  }));\n};\n\nconst form = reduxForm({\n  form: 'sign-up'\n})(Form);\nexport default form;","map":{"version":3,"sources":["/home/julia/ToDoList/my-app/src/pages/auth/sing_up/components/formSignUp.tsx"],"names":["React","useEffect","useState","Field","reduxForm","RenderTextField","Button","makeStyles","Grid","NavLink","Alert","useStyles","theme","submit","margin","spacing","Form","error","isErrorAuth","props","classes","textError","setError","console","log","username","password","tsetError","handleSubmit","form"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\";\nimport { RenderTextField } from \"../../../../components/TextField\";\nimport { Button, makeStyles, Grid } from \"@material-ui/core\";\nimport { NavLink } from \"react-router-dom\";\nimport Alert from \"../../../../components/Alert/index\";\n\n\ninterface IProps {\n    isErrorAuth : boolean;\n    error : any;\n}\n\nconst useStyles = makeStyles((theme) => ({\n    submit : {\n        margin: theme.spacing(3, 0, 2),\n    },\n}));\n\nconst Form : React.FC<IProps & InjectedFormProps<{}, IProps>> = ({ error, isErrorAuth, ...props}) => {\n\n    const classes = useStyles();\n    const [textError, setError] = useState('')\n    useEffect(() => {\n        if(error){\n            console.log(\"1\")\n            if(error.username && error.password){\n                setError(\"Такой пользователь существует. Пароль слишком легкий.\");\n                console.log(\"2\")\n            }else if (error.password){\n                tsetError(\"Пароль слишком легкий.\");\n            }else if (error.username){\n                setError(\"Такой пользователь существует.\");\n            }\n        }\n    },[error]);\n\n    return(\n        <form onSubmit={props.handleSubmit}>\n            <Field name=\"username\" component={RenderTextField} label=\"username\" type= \"username\"/>\n            <Field name=\"email\" component={RenderTextField} label=\"email\" type= \"email\"/>\n            <Field name=\"password\" component={RenderTextField} label=\"password\" type= \"password\"/>\n            <Button\n                type=\"submit\"\n                fullWidth\n                variant = \"contained\"\n                color = \"primary\"\n                className = {classes.submit}>\n                    Зарегистрироваться\n            </Button>\n            <Grid \n                container\n                direction=\"row\"\n                justify=\"flex-end\"\n                alignItems=\"baseline\">\n                    <NavLink to=\"/\" >\n                        Авторизация\n                    </NavLink>\n            </Grid>\n            {isErrorAuth && <Alert error_text = {textError}/>}\n        </form>\n    );\n}\n\nconst form = reduxForm<{}, IProps>({\n    form : 'sign-up'\n})(Form);\n\nexport default form;"]},"metadata":{},"sourceType":"module"}