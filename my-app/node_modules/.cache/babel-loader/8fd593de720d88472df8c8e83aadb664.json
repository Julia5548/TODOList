{"ast":null,"code":"import { REMOVE_TASK, TOGGLE_TASK, INITIAL_TASK } from \"../../actions/types\";\nconst initialStateUser = {\n  tasks: []\n};\n\nconst initialTask = (state, action) => {\n  state.tasks.filter(element => {\n    action.task = action.task.filter(newElement => newElement.id !== element.id);\n  });\n  return action.task;\n};\n\nexport function task_reducer(state = initialStateUser, action) {\n  switch (action.type) {\n    case INITIAL_TASK:\n      return { ...state,\n        tasks: [...state.tasks.concat(action.task)]\n      };\n\n    case ADD_TODO:\n    case TOGGLE_TASK:\n      return { ...state,\n        tasks: state.tasks.map(task => task.id === action.task.id ? { ...task,\n          is_completed: action.task.is_completed\n        } : task)\n      };\n\n    case REMOVE_TASK:\n      return { ...state,\n        tasks: state.tasks.filter(item => item.id !== action.task.id)\n      };\n\n    default:\n      return state;\n  }\n\n  ;\n}","map":{"version":3,"sources":["/home/julia/ToDoList/my-app/src/store/reducers/reducerTask/index.tsx"],"names":["REMOVE_TASK","TOGGLE_TASK","INITIAL_TASK","initialStateUser","tasks","initialTask","state","action","filter","element","task","newElement","id","task_reducer","type","concat","ADD_TODO","map","is_completed","item"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,WAAtB,EAAmCC,YAAnC,QAAuD,qBAAvD;AAIA,MAAMC,gBAAgB,GAAG;AACrBC,EAAAA,KAAK,EAAI;AADY,CAAzB;;AAIA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAA6B;AAC7CD,EAAAA,KAAK,CAACF,KAAN,CAAYI,MAAZ,CAAoBC,OAAD,IAAsB;AACrCF,IAAAA,MAAM,CAACG,IAAP,GAAYH,MAAM,CAACG,IAAP,CAAYF,MAAZ,CAAoBG,UAAD,IAAgBA,UAAU,CAACC,EAAX,KAAkBH,OAAO,CAACG,EAA7D,CAAZ;AACH,GAFD;AAGA,SAAOL,MAAM,CAACG,IAAd;AACH,CALD;;AAOA,OAAO,SAASG,YAAT,CAAwBP,KAAK,GAAGH,gBAAhC,EAAkDI,MAAlD,EAA0D;AAC7D,UAAOA,MAAM,CAACO,IAAd;AACI,SAAKZ,YAAL;AACI,aAAO,EAAC,GAAGI,KAAJ;AAAYF,QAAAA,KAAK,EAAG,CAAC,GAAGE,KAAK,CAACF,KAAN,CAAYW,MAAZ,CAAmBR,MAAM,CAACG,IAA1B,CAAJ;AAApB,OAAP;;AACJ,SAAKM,QAAL;AACA,SAAKf,WAAL;AACI,aAAO,EAAE,GAAGK,KAAL;AAAYF,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,CAAYa,GAAZ,CAAiBP,IAAD,IACtCA,IAAI,CAACE,EAAL,KAAYL,MAAM,CAACG,IAAP,CAAYE,EAAxB,GAA6B,EAAC,GAAGF,IAAJ;AAAUQ,UAAAA,YAAY,EAAGX,MAAM,CAACG,IAAP,CAAYQ;AAArC,SAA7B,GAAkFR,IAD5D;AAAnB,OAAP;;AAEJ,SAAKV,WAAL;AACI,aAAO,EAAC,GAAGM,KAAJ;AAAWF,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,CAAYI,MAAZ,CAAoBW,IAAD,IAAiBA,IAAI,CAACP,EAAL,KAAYL,MAAM,CAACG,IAAP,CAAYE,EAA5D;AAAlB,OAAP;;AACJ;AAAU,aAAON,KAAP;AATd;;AAUC;AACJ","sourcesContent":["import { REMOVE_TASK, TOGGLE_TASK, INITIAL_TASK } from \"../../actions/types\";\nimport  { ITask }  from \"../../../interfaces/ITask\";\n\n\nconst initialStateUser = {\n    tasks :  []\n};\n\nconst initialTask = (state, action) : ITask[] => {\n    state.tasks.filter((element : ITask)  => {\n        action.task=action.task.filter((newElement) => newElement.id !== element.id)\n    });\n    return action.task;\n};\n\nexport function task_reducer ( state = initialStateUser, action) {\n    switch(action.type){\n        case INITIAL_TASK:\n            return {...state , tasks : [...state.tasks.concat(action.task)]};\n        case ADD_TODO :  \n        case TOGGLE_TASK:\n            return { ...state, tasks: state.tasks.map((task : ITask)=>\n                task.id === action.task.id ? {...task, is_completed : action.task.is_completed} : task )};\n        case REMOVE_TASK:\n            return {...state, tasks: state.tasks.filter((item : ITask)=> item.id !== action.task.id)};\n        default : return state;\n    };\n}"]},"metadata":{},"sourceType":"module"}