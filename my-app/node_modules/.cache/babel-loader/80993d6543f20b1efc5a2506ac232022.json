{"ast":null,"code":"var _jsxFileName = \"/home/julia/ToDoList/my-app/src/pages/User.tsx\";\nimport React from 'react';\nimport { connect, useSelector } from 'react-redux';\nimport Route from '../routes';\nimport { onCurrentUserAction, onLogoutAction } from '../store/actions';\nimport { onGetTokenAction, onGetUserAction } from '../store/actions';\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onGetToken: () => {\n      dispatch(onGetTokenAction());\n    },\n    onCurrentUser: current_user => {\n      dispatch(onCurrentUserAction(current_user));\n    },\n    onGetUser: () => {\n      dispatch(onGetUserAction());\n    },\n    onLogout: () => {\n      dispatch(onLogoutAction());\n    }\n  };\n};\n\nconst mapStateToProps = state => ({\n  username: state.user_data.username,\n  isErrorAuth: state.user_data.isErrorAuth\n});\n\nconst User = props => {\n  if (localStorage.getItem('token')) {\n    props.onGetToken();\n  }\n\n  const current_state_user = useSelector(state => state.user_data.isLoggedIn); // useEffect(() => {\n  //     if(current_state_user){\n  //         try{\n  //                 const result = fetchGetDataUser()\n  //                 // if(current_user.id !== undefined){\n  //                 //     props.onCurrentUser(current_user);\n  //                 // }else{\n  //                 //     props.onLogout();\n  //                 // }\n  //         }catch(error){\n  //             console.log('ERROR: ', error)\n  //         }\n  //     }\n  // }, [current_state_user])\n\n  return /*#__PURE__*/React.createElement(Route, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(User);","map":{"version":3,"sources":["/home/julia/ToDoList/my-app/src/pages/User.tsx"],"names":["React","connect","useSelector","Route","onCurrentUserAction","onLogoutAction","onGetTokenAction","onGetUserAction","mapDispatchToProps","dispatch","onGetToken","onCurrentUser","current_user","onGetUser","onLogout","mapStateToProps","state","username","user_data","isErrorAuth","User","props","localStorage","getItem","current_state_user","isLoggedIn"],"mappings":";AAAA,OAAOA,KAAP,MAAiC,OAAjC;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,aAArC;AACA,OAAOC,KAAP,MAAkB,WAAlB;AAEA,SAAUC,mBAAV,EAA+BC,cAA/B,QAAqD,kBAArD;AACA,SAASC,gBAAT,EAA4BC,eAA5B,QAAkD,kBAAlD;;AAKA,MAAMC,kBAAkB,GAAIC,QAAD,IAAc;AACrC,SAAO;AAEHC,IAAAA,UAAU,EAAG,MAAM;AACfD,MAAAA,QAAQ,CAACH,gBAAgB,EAAjB,CAAR;AACH,KAJE;AAMHK,IAAAA,aAAa,EAAIC,YAAD,IAAyB;AACrCH,MAAAA,QAAQ,CAACL,mBAAmB,CAACQ,YAAD,CAApB,CAAR;AACH,KARE;AASHC,IAAAA,SAAS,EAAG,MAAM;AACdJ,MAAAA,QAAQ,CAACF,eAAe,EAAhB,CAAR;AACH,KAXE;AAYHO,IAAAA,QAAQ,EAAG,MAAM;AACbL,MAAAA,QAAQ,CAACJ,cAAc,EAAf,CAAR;AACH;AAdE,GAAP;AAgBH,CAjBD;;AAmBA,MAAMU,eAAe,GAAIC,KAAD,KAAY;AAChCC,EAAAA,QAAQ,EAAGD,KAAK,CAACE,SAAN,CAAgBD,QADK;AAEhCE,EAAAA,WAAW,EAAGH,KAAK,CAACE,SAAN,CAAgBC;AAFE,CAAZ,CAAxB;;AAKA,MAAMC,IAAI,GAAIC,KAAD,IAAiB;AAE1B,MAAIC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAJ,EAAkC;AAC9BF,IAAAA,KAAK,CAACX,UAAN;AACH;;AAED,QAAMc,kBAAkB,GAAGtB,WAAW,CAAEc,KAAD,IAAuBA,KAAK,CAACE,SAAN,CAAgBO,UAAxC,CAAtC,CAN0B,CAQ1B;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACI,oBAAC,KAAD,oBAAWJ,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADJ;AAGH,CA3BD;;AA6BA,eAAepB,OAAO,CAACc,eAAD,EAAkBP,kBAAlB,CAAP,CAA6CY,IAA7C,CAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport { connect, useSelector } from 'react-redux';\nimport Route from '../routes';\nimport { RootState } from '../store/reducers';\nimport {  onCurrentUserAction, onLogoutAction } from '../store/actions';\nimport { onGetTokenAction , onGetUserAction} from '../store/actions';\nimport { IUser } from '../interfaces/IUser';\nimport { fetchGetDataUser } from '../services/services_user';\n\n\nconst mapDispatchToProps = (dispatch) => {\n    return({\n        \n        onGetToken : () => { \n            dispatch(onGetTokenAction()) \n        },\n\n        onCurrentUser : (current_user: IUser) => { \n            dispatch(onCurrentUserAction(current_user))\n        },\n        onGetUser : () => {\n            dispatch(onGetUserAction())\n        },\n        onLogout : () => { \n            dispatch(onLogoutAction()) \n        }\n    })\n}\n\nconst mapStateToProps = (state) => ({\n    username : state.user_data.username,\n    isErrorAuth : state.user_data.isErrorAuth\n})\n\nconst User = (props : any) => {\n\n    if (localStorage.getItem('token')){\n        props.onGetToken();\n    }\n\n    const current_state_user = useSelector((state : RootState) => state.user_data.isLoggedIn);\n\n    // useEffect(() => {\n    //     if(current_state_user){\n    //         try{\n    //                 const result = fetchGetDataUser()\n                    \n    //                 // if(current_user.id !== undefined){\n    //                 //     props.onCurrentUser(current_user);\n    //                 // }else{\n    //                 //     props.onLogout();\n    //                 // }\n    //         }catch(error){\n    //             console.log('ERROR: ', error)\n    //         }\n    //     }\n    // }, [current_state_user])\n\n    return (\n        <Route {...props}/>\n    );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(User);"]},"metadata":{},"sourceType":"module"}