{"ast":null,"code":"var _jsxFileName = \"/home/julia/ToDoList/my-app/src/pages/User.tsx\";\nimport React, { useEffect } from 'react';\nimport { connect, useSelector } from 'react-redux';\nimport Route from '../routes';\nimport { toggleTaskAction, removeTaskAction, onCurrentUserAction } from '../store/actions';\nimport { onGetTokenAction, onGetUserAction } from '../store/actions';\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onToggle: task => {\n      dispatch(toggleTaskAction(task));\n    },\n    onRemove: task => {\n      dispatch(removeTaskAction(task));\n    },\n    onGetToken: () => {\n      dispatch(onGetTokenAction());\n    },\n    onCurrentUser: current_user => {\n      dispatch(onCurrentUserAction(current_user));\n    },\n    onGetUser: () => {\n      dispatch(onGetUserAction());\n    }\n  };\n};\n\nconst mapStateToProps = state => ({\n  username: state.user_data.username,\n  isErrorAuth: state.user_data.isErrorAuth\n});\n\nconst User = props => {\n  if (localStorage.getItem('token')) {\n    props.onGetToken();\n  }\n\n  const current_state_user = useSelector(state => state.user_data.isLoggedIn);\n  useEffect(() => {\n    if (current_state_user) {\n      try {\n        fetch('http://127.0.0.1:8000/api_users/current_user/', {\n          mode: 'cors',\n          method: 'GET',\n          headers: {\n            Authorization: 'JWT ' + localStorage.getItem('token')\n          }\n        }).then(response => response.json()).then(data => {\n          const current_user = {\n            id: data.id,\n            username: data.username,\n            isLoggedIn: true,\n            isErrorAuth: false\n          };\n\n          if (current_user.id !== undefined) {\n            props.onCurrentUser(current_user);\n            const url = 'todo/' + current_user.id;\n          } else {\n            props.onLogout();\n          }\n        });\n      } catch (error) {\n        console.log('ERROR: ', error);\n      }\n    }\n  }, [current_state_user]);\n  return /*#__PURE__*/React.createElement(Route, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(User);","map":{"version":3,"sources":["/home/julia/ToDoList/my-app/src/pages/User.tsx"],"names":["React","useEffect","connect","useSelector","Route","toggleTaskAction","removeTaskAction","onCurrentUserAction","onGetTokenAction","onGetUserAction","mapDispatchToProps","dispatch","onToggle","task","onRemove","onGetToken","onCurrentUser","current_user","onGetUser","mapStateToProps","state","username","user_data","isErrorAuth","User","props","localStorage","getItem","current_state_user","isLoggedIn","fetch","mode","method","headers","Authorization","then","response","json","data","id","undefined","url","onLogout","error","console","log"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { connect, useSelector } from 'react-redux';\nimport Route from '../routes'\nimport { reset } from 'redux-form';\nimport { RootState } from '../store/reducers';\nimport { addTaskAction, toggleTaskAction, removeTaskAction, onLogoutAction, onCurrentUserAction } from '../store/actions';\nimport { onLoginUserAction, onCreateUserAction, onResetPasswordAction, onGetTokenAction , onGetUserAction} from '../store/actions';\nimport { ITodo } from '../interfaces/ITodo';\nimport { IUser } from '../interfaces/IUser';\n\n\nconst mapDispatchToProps = (dispatch) => {\n    return({\n        \n        onToggle : (task : ITask) => {\n            dispatch(toggleTaskAction(task))\n        },\n        onRemove : (task : ITodo) => {\n            dispatch(removeTaskAction(task))\n        },\n        onGetToken : () => { \n            dispatch(onGetTokenAction()) \n        },\n\n        onCurrentUser : (current_user: IUser) => { \n            dispatch(onCurrentUserAction(current_user))\n        },\n        onGetUser : () => {\n            dispatch(onGetUserAction())\n        }\n    })\n}\n\nconst mapStateToProps = (state) => ({\n    username : state.user_data.username,\n    isErrorAuth : state.user_data.isErrorAuth\n})\n\nconst User = (props : any) => {\n\n    if (localStorage.getItem('token')){\n        props.onGetToken();\n    }\n\n    const current_state_user = useSelector((state : RootState) => state.user_data.isLoggedIn);\n\n    useEffect(() => {\n        if(current_state_user){\n            try{\n                fetch('http://127.0.0.1:8000/api_users/current_user/',\n                    {\n                        mode: 'cors',\n                        method : 'GET',\n                        headers: {\n                            Authorization : 'JWT ' + localStorage.getItem('token')\n                        }\n                    }\n                )\n                .then(response => \n                    response.json()\n                )\n                .then(data => {\n                    const current_user : IUser = {\n                        id : data.id, \n                        username : data.username, \n                        isLoggedIn : true,\n                        isErrorAuth : false\n                    };\n                    if(current_user.id !== undefined){\n                        props.onCurrentUser(current_user);\n                        const url : string= 'todo/'+ current_user.id;\n                    }else{\n                        props.onLogout();\n                    }\n                })\n            }catch(error){\n                console.log('ERROR: ', error)\n            }\n        }\n    }, [current_state_user])\n\n    return (\n        <Route {...props}/>\n    );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(User);"]},"metadata":{},"sourceType":"module"}