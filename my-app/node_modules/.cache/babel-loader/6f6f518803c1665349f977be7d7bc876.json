{"ast":null,"code":"var _jsxFileName = \"/home/julia/ToDoList/my-app/src/pages/todo-list/display-task/index.tsx\";\nimport React from 'react';\nimport { makeStyles, Typography, Button, AppBar, Toolbar, Grid } from '@material-ui/core';\nimport FormCreateTask from './components/formCreateTask';\nimport { connect } from 'react-redux';\nimport { addTaskAction } from '../../../store/actions';\nimport { reset } from 'redux-form';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  title: {\n    flexGrow: 1\n  },\n  submit: {\n    margin: theme.spacing(3.5, 0, 0, 2),\n    textAlign: 'center'\n  },\n  textField: {\n    textAlign: 'center',\n    marginLeft: theme.spacing(3),\n    color: theme.palette.text.secondary\n  },\n  rootList: {\n    display: 'flex-start',\n    justifyContent: 'flex-start',\n    overflow: 'hidden',\n    backgroundColor: theme.palette.background.paper\n  }\n}));\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAddTask: newTask => {\n      dispatch(addTaskAction(newTask));\n      dispatch(reset('createTask'));\n    }\n  };\n};\n\nconst mapStateToProps = state => ({});\n\nexport const DisplayTodo = props => {\n  const classes = useStyles();\n  const todoList = [{\n    id: 0,\n    title: 'покормить кота',\n    isCompleted: false\n  }, {\n    id: 1,\n    title: 'покормить ct,z',\n    isCompleted: false\n  }, {\n    id: 1,\n    title: 'покормить ct,z',\n    isCompleted: false\n  }, {\n    id: 1,\n    title: 'покормить ct,z',\n    isCompleted: false\n  }, {\n    id: 1,\n    title: 'покормить ct,z',\n    isCompleted: false\n  }, {\n    id: 1,\n    title: 'покормить ct,z',\n    isCompleted: false\n  }, {\n    id: 1,\n    title: 'покормить ct,z',\n    isCompleted: false\n  }];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AppBar, {\n    position: \"static\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Toolbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    className: classes.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 21\n    }\n  }, \"username\"), /*#__PURE__*/React.createElement(Button, {\n    color: \"inherit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 21\n    }\n  }, \"\\u0412\\u044B\\u0445\\u043E\\u0434\"))), /*#__PURE__*/React.createElement(FormCreateTask, {\n    onAddTask: props.onAddTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Container, {\n    className: classes.cardGrid,\n    maxWidth: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }\n  }, todoList.map(todo => /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    key: card,\n    xs: 12,\n    sm: 6,\n    md: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    className: classes.card,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(CardMedia, {\n    className: classes.cardMedia,\n    image: \"https://source.unsplash.com/random\",\n    title: \"Image title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(CardContent, {\n    className: classes.cardContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    gutterBottom: true,\n    variant: \"h5\",\n    component: \"h2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 21\n    }\n  }, \"Heading\"), /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 21\n    }\n  }, \"This is a media card. You can use this section to describe the content.\")), /*#__PURE__*/React.createElement(CardActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    size: \"small\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 21\n    }\n  }, \"View\"), /*#__PURE__*/React.createElement(Button, {\n    size: \"small\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 21\n    }\n  }, \"Edit\"))))))));\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(DisplayTodo);","map":{"version":3,"sources":["/home/julia/ToDoList/my-app/src/pages/todo-list/display-task/index.tsx"],"names":["React","makeStyles","Typography","Button","AppBar","Toolbar","Grid","FormCreateTask","connect","addTaskAction","reset","useStyles","theme","root","flexGrow","title","submit","margin","spacing","textAlign","textField","marginLeft","color","palette","text","secondary","rootList","display","justifyContent","overflow","backgroundColor","background","paper","mapDispatchToProps","dispatch","onAddTask","newTask","mapStateToProps","state","DisplayTodo","props","classes","todoList","id","isCompleted","cardGrid","map","todo","card","cardMedia","cardContent"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { makeStyles, Typography, Button, AppBar, Toolbar, Grid, GridList, GridListTile, ListSubheader, GridListTileBar, IconButton} from '@material-ui/core';\nimport FormCreateTask from './components/formCreateTask';\nimport { connect } from 'react-redux';\nimport { addTaskAction } from '../../../store/actions';\nimport { reset } from 'redux-form';\nimport { ITask } from '../../../interfaces/ITask';\n\n\ninterface IProps{\n    onAddTask(newTask : ITask) : void;\n}\n\nconst useStyles = makeStyles((theme) => ({\n\n    root : {\n        flexGrow : 1,\n    },\n    title : {\n        flexGrow: 1,\n    },\n    submit : {\n        margin: theme.spacing(3.5, 0, 0, 2),\n        textAlign: 'center',\n    },\n    textField :{\n        textAlign: 'center',\n        marginLeft: theme.spacing(3),\n        color: theme.palette.text.secondary,\n    },\n    rootList: {\n        display: 'flex-start',\n        justifyContent: 'flex-start',\n        overflow: 'hidden',\n        backgroundColor: theme.palette.background.paper,\n    },\n}))\n\nconst mapDispatchToProps = (dispatch) => {\n    return({\n        onAddTask : (newTask : ITask) => {\n            dispatch(addTaskAction(newTask))\n            dispatch(reset('createTask'))\n        }\n    })\n}\n\nconst mapStateToProps = (state) => ({})\n\nexport const DisplayTodo : React.FC<IProps> = (props : IProps) => {\n    const classes = useStyles();\n\n    const todoList = [\n        {\n            id: 0,\n            title : 'покормить кота',\n            isCompleted : false,\n        }, \n        {\n            id: 1,\n            title : 'покормить ct,z',\n            isCompleted : false,\n        },\n        {\n            id: 1,\n            title : 'покормить ct,z',\n            isCompleted : false,\n        },\n        {\n            id: 1,\n            title : 'покормить ct,z',\n            isCompleted : false,\n        },\n        {\n            id: 1,\n            title : 'покормить ct,z',\n            isCompleted : false,\n        },\n        {\n            id: 1,\n            title : 'покормить ct,z',\n            isCompleted : false,\n        },\n        {\n            id: 1,\n            title : 'покормить ct,z',\n            isCompleted : false,\n        }\n    ]\n    return(\n        <div className = {classes.root}>\n            <AppBar position = \"static\">\n                <Toolbar>\n                    <Typography variant=\"h6\" className = {classes.title}>\n                        username\n                    </Typography>\n                    <Button color=\"inherit\">\n                        Выход\n                    </Button>\n                </Toolbar>\n            </AppBar>\n            <FormCreateTask onAddTask = {props.onAddTask}/>\n            <Container className={classes.cardGrid} maxWidth=\"md\">\n                {/* End hero unit */}\n                <Grid container spacing={4}>\n                    {todoList.map((todo) => (\n                    <Grid item key={card} xs={12} sm={6} md={4}>\n                        <Card className={classes.card}>\n                            <CardMedia\n                                className={classes.cardMedia}\n                                image=\"https://source.unsplash.com/random\"\n                                title=\"Image title\"\n                            />\n                            <CardContent className={classes.cardContent}>\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                      Heading\n                    </Typography>\n                    <Typography>\n                      This is a media card. You can use this section to describe the content.\n                    </Typography>\n                  </CardContent>\n                  <CardActions>\n                    <Button size=\"small\" color=\"primary\">\n                      View\n                    </Button>\n                    <Button size=\"small\" color=\"primary\">\n                      Edit\n                    </Button>\n                  </CardActions>\n                </Card>\n              </Grid>\n            ))}\n          </Grid>\n        </Container>\n        </div>\n    )\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DisplayTodo)"]},"metadata":{},"sourceType":"module"}